{"version":3,"sources":["webpack:///./js/render.js","webpack:///./js/fps.js","webpack:///./js/paint.js","webpack:///./js/components/info.js","webpack:///./js/components/menu.js","webpack:///./js/components/matrix.js","webpack:///./js/components/editor.js","webpack:///./js/components/ui.js","webpack:///./js/app.js","webpack:///./js/index.js","webpack:///./crate/pkg/sandtable_bg.js","webpack:///./js/glsl/sand.glsl","webpack:///./js/glsl/sandVertex.glsl","webpack:///./js/setup.js"],"names":["reglBuilder","require","window","memory","fsh","vsh","startWebGL","regl","canvas","universe","isSnapshot","gl","lastFrame","attributes","preserveDrawingBuffer","texture","width","height","cell_pointer","cells","Uint8Array","buffer","dataTexture","data","drawSand","blend","enable","func","srcRGB","srcAlpha","dstRGB","dstAlpha","equation","rgb","alpha","color","frag","uniforms","t","tick","skyTime","resolution","viewportWidth","viewportHeight","dpi","backBuffer","vert","position","count","draw","poll","fps","this","document","getElementById","frames","lastFrameTimeStamp","performance","now","delta","push","length","shift","min","Infinity","max","sum","i","Math","mean","textContent","round","toString","padStart","eventDistance","a","b","sqrt","pow","clientX","clientY","norm","mag","magnitude","scale","s","add","sub","painting","lastPaint","repeat","smoothPaint","event","clearInterval","setInterval","paint","startEvent","UI","state","selectedElement","Species","Fish","GoldFish","d","addEventListener","preventDefault","push_undo","body","cancelable","Array","from","touches","handleTouches","paused","forEach","boundingRect","getBoundingClientRect","left","top","bw","scaleX","ratio","ceil","devicePixelRatio","scaleY","canvasLeft","canvasTop","floor","convertEventCoordinates","x","y","Info","className","to","aria-label","Menu","close","children","id","onClick","console","log","SymmetryMode","ruleSymbols","Empty","Rule1","Rule2","Rule3","Rule4","Rule5","Rule6","SymmetryOptions","key","Horizontal","symbol","Quad","SlotOptions","Wild","grid_index","Matrix","props","isSelector","isCenter","grid","options","inactive","myCell","find","m","incSlot","slotIndex","findIndex","e","next","setGrid","size","inset","transform","onContextMenu","onDrop","element","dataTransfer","getData","parseInt","onDragOver","draggable","style","filter","backgroundColor","pallette","borderColor","borderWidth","fontSize","borderStyle","lineHeight","verticalAlign","onDragStart","setData","gridSquare","React","Component","probabilityMap","p","Editor","clause_index","clause","getRule","u","selector","effector","symmetry","probability","v","j_selector","j_effector","j_symmetry","Selector","Effector","r_clause","Clause","set_clause","setState","setRule","pIndex","indexOf","xmlns","viewBox","classNames","disabled","incSymmetry","newGrid","href","species","pallette_data","createElement","Object","values","k","isNaN","parseFloat","range","Universe","reset","render","ctx","getContext","readPixels","RGBA","UNSIGNED_BYTE","colors","index","resetClause","Index","submissionMenuOpen","ff","submitting","dataURL","currentSubmission","prevProps","play","context","imgData","createImageData","putImageData","cellData","toDataURL","JSON","stringify","date","Date","getMonth","getDate","activeSpecies","keys","name","map","n","setElement","elementID","selected","text","background","ElementButton","src","closeMenu","display","AppRouter","path","component","exact","h","drawBowl","ReactDOM","HUD","resize","screen_width","innerWidth","canvasStyle","innerHeight","HUDStyle","hudWidth","localStorage","getItem","setItem","renderLoop","max_tick_per_frame","requestAnimationFrame","load","cachedTextDecoder","TextDecoder","module","ignoreBOM","fatal","decode","cachegetUint8Memory0","getStringFromWasm0","ptr","len","wasm","subarray","_assertClass","instance","klass","Error","what","freeze","ptr0","ptr1","ret","__wrap","arg0","obj","create","prototype","v1","v2","v3","v4","v5","v6","v7","v8","v9","Rule","c0","c1","c2","ptr2","c","ri","ci","rule","__wbg_random_a3b3bcffa2ed629c","random","__wbindgen_throw","arg1","exports","timeout","setTimeout","tutorialProgress","classList","handleActivity","clearTimeout","remove"],"mappings":"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","file":"2.11fcafeaf48bb66438e4.js","sourcesContent":["const reglBuilder = require(\"regl\");\nconst GIF = require(\"gif.js\");\n// const GIF = require(\"gl-gif\");\nimport { memory } from \"../crate/pkg/sandtable_bg\";\nwindow.memory = memory;\nimport { Species } from \"../crate/pkg/sandtable\";\nimport { Universe } from \"../crate/pkg\";\nimport { finished } from \"stream\";\n\nlet fsh = require(\"./glsl/sand.glsl\");\nlet vsh = require(\"./glsl/sandVertex.glsl\");\n\nlet startWebGL = ({ canvas, universe, isSnapshot = false, gl }) => {\n  let regl;\n  if (gl) {\n    regl = reglBuilder({\n      gl,\n      attributes: { preserveDrawingBuffer: isSnapshot }\n    });\n  } else {\n    regl = reglBuilder({\n      canvas,\n      attributes: { preserveDrawingBuffer: isSnapshot }\n    });\n  }\n  const lastFrame = regl.texture();\n  const width = universe.width();\n  const height = universe.height();\n  let cell_pointer = universe.cells();\n  let cells = new Uint8Array(memory.buffer, cell_pointer, width * height * 4);\n\n  const dataTexture = regl.texture({ width, height, data: cells });\n\n  let drawSand = regl({\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: \"src alpha\",\n        srcAlpha: 1,\n        dstRGB: \"one minus src alpha\",\n        dstAlpha: 1\n      },\n      equation: {\n        rgb: \"add\",\n        alpha: \"add\"\n      },\n      color: [0, 0, 0, 0]\n    },\n    frag: fsh,\n    uniforms: {\n      t: ({ tick }) => tick,\n      skyTime: () => window.skyTime || 0,\n      dataTexture: () => {\n        cell_pointer = universe.cells();\n        cells = new Uint8Array(memory.buffer, cell_pointer, width * height * 4);\n        return dataTexture({ width, height, data: cells });\n      },\n\n      resolution: ({ viewportWidth, viewportHeight }) => [\n        viewportWidth,\n        viewportHeight\n      ],\n      dpi: 4,\n      isSnapshot,\n      backBuffer: lastFrame\n    },\n\n    vert: vsh,\n    attributes: {\n      // Full screen triangle\n      position: [\n        [-1, 4],\n        [-1, -1],\n        [4, -1]\n      ]\n    },\n    // Our triangle has 3 vertices\n    count: 3\n  });\n\n  return {\n    regl,\n    draw: () => {\n      regl.poll();\n      drawSand();\n      // lastFrame({\n      //   copy: true\n      // });\n    }\n  };\n};\n\nlet snapshot = universe => {\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = universe.width() / 2;\n  canvas.height = universe.height() / 2;\n  let render = startWebGL({ universe, canvas, isSnapshot: true });\n  render();\n\n  return canvas.toDataURL(\"image/png\");\n};\n\nlet exportGif = (universe, cb) => {\n  window.paused = true;\n\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = universe.width() * 2;\n  canvas.height = universe.height() * 2;\n  let w = canvas.width;\n  let h = canvas.height;\n  // let gl = canvas.getContext(\"webgl\");\n\n  var gif = new GIF({\n    workers: 2,\n    quality: 10,\n    width: canvas.width,\n    height: canvas.height,\n    transparent: \"rgba(0,0,0,0)\"\n  });\n  let frames = [];\n\n  const tmpc = document.createElement(\"canvas\");\n  tmpc.width = w;\n  tmpc.height = h;\n  const tctx = tmpc.getContext(\"2d\");\n\n  frames = [];\n  let frameSize = { width: canvas.width, height: canvas.height };\n\n  const numFrames = 20;\n  let t = window.t;\n  for (var i = 0; i < numFrames; i++) {\n    universe.set_time((t / 50) % 255);\n    t += 5;\n    universe.tick();\n    canvas = document.createElement(\"canvas\");\n    canvas.width = universe.width() * 2;\n    canvas.height = universe.height() * 2;\n    let w = canvas.width;\n    let h = canvas.height;\n    let { regl, draw } = startWebGL({ universe, canvas, isSnapshot: false });\n\n    draw();\n    console.log(\"adding frame \" + i);\n    // gif.addFrame(gl, { copy: false });\n\n    // this is faster but the y-axis gets flipped\n    // let data = new ImageData(w, h);\n    // let pixels = new Uint8Array(data.data.buffer);\n    // regl.read(pixels);\n\n    // gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, pixels)\n\n    // var bytes = new Uint8Array(100)\n    // regl.read(bytes)\n\n    tctx.clearRect(0, 0, w, h);\n\n    tctx.drawImage(canvas, 0, 0);\n    const data = tctx.getImageData(0, 0, w, h);\n    frames.push(data);\n\n    // // don't lock up the ui\n    // if (i % 4 == 0) {\n    //     await nextTick()\n    // }\n  }\n  // console.log(frames);\n  //boomerang\n  frames = [...frames, ...frames.slice(0).reverse()];\n  for (const frame of frames) {\n    gif.addFrame(frame, { delay: 16 });\n  }\n\n  gif.on(\"finished\", function(blob) {\n    // window.open(URL.createObjectURL(blob));\n    cb(URL.createObjectURL(blob));\n  });\n  gif.render();\n  // const renderFrame = (n = 0) => {\n  //   console.log(n);\n\n  //   if (n == 20) {\n  //     console.log(\"finished!\");\n  //     gif.on(\"finished\", function(blob) {\n  //       window.open(URL.createObjectURL(blob));\n  //     });\n  //     gif.render();\n  //   } else {\n\n  //     renderFrame(n + 1);\n  //   }\n  // };\n  // renderFrame();\n  window.paused = false;\n};\n\nlet pallette = () => {\n  let canvas = document.createElement(\"canvas\");\n\n  let species = Object.values(Species).filter(k => !isNaN(parseFloat(k)));\n  let range = Math.max(...species) + 1;\n  let universe = Universe.new(range, 1);\n  canvas.width = range;\n  canvas.height = 3;\n  universe.reset();\n\n  species.forEach(id => universe.paint(id, 0, 2, id));\n  universe.paint(Species.Empty, 0, 2, Species.Empty);\n  let render = startWebGL({ universe, canvas, isSnapshot: true }).draw;\n  render();\n  let ctx = canvas.getContext(\"webgl\");\n  let data = new Uint8Array(range * 4);\n  ctx.readPixels(0, 0, range, 1, ctx.RGBA, ctx.UNSIGNED_BYTE, data);\n  let colors = {};\n  species.forEach(id => {\n    let index = id * 4;\n    let color = `rgba(${data[index]},${data[index + 1]}, ${\n      data[index + 2]\n    }, 0.9)`;\n    colors[id] = color;\n  });\n  return colors;\n};\n\nexport { startWebGL, snapshot, pallette, exportGif };\n","const fps = new (class {\n  constructor() {\n    this.fps = document.getElementById(\"fps\");\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Convert the delta time since the last frame render into a measure\n    // of frames per second.\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now;\n    const fps = (1 / delta) * 1000;\n\n    // Save only the latest 100 timings.\n    this.frames.push(fps);\n    if (this.frames.length > 30) {\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of our 100 latest timings.\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n    for (let i = 0; i < this.frames.length; i++) {\n      sum += this.frames[i];\n      min = Math.min(this.frames[i], min);\n      max = Math.max(this.frames[i], max);\n    }\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `FPS:${Math.round(mean)\n      .toString()\n      .padStart(3)}`;\n  }\n})();\n\nexport { fps };\n","import { height, universe, width, ratio } from \"./index.js\";\n\nimport { Species } from \"../crate/pkg\";\n\nconst canvas = document.getElementById(\"sand-canvas\");\nlet lastPlacedFish = 0;\nfunction canPlaceFish() {\n  let diff = Date.now() - lastPlacedFish;\n  if (diff > 1000) {\n    lastPlacedFish = Date.now();\n    return true;\n  } else {\n    return false;\n  }\n}\nconst eventDistance = (a, b) => {\n  return Math.sqrt(\n    Math.pow(a.clientX - b.clientX, 2) + Math.pow(a.clientY - b.clientY, 2),\n    2\n  );\n};\n\nconst magnitude = (a) => {\n  return Math.sqrt(Math.pow(a.clientX, 2) + Math.pow(a.clientY, 2), 2);\n};\n\nconst norm = (a) => {\n  let mag = magnitude(a);\n  return { clientX: a.clientX / mag, clientY: a.clientY / mag };\n};\nconst scale = (a, s) => {\n  return { clientX: a.clientX * s, clientY: a.clientY * s };\n};\nconst add = (a, b) => {\n  return { clientX: a.clientX + b.clientX, clientY: a.clientY + b.clientY };\n};\nconst sub = (a, b) => {\n  return { clientX: a.clientX - b.clientX, clientY: a.clientY - b.clientY };\n};\n\nlet painting = false;\nlet lastPaint = null;\nlet repeat = null;\n\ncanvas.addEventListener(\"mousedown\", (event) => {\n  event.preventDefault();\n\n  universe.push_undo();\n\n  painting = true;\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  paint(event);\n  lastPaint = event;\n});\n\ndocument.body.addEventListener(\"mouseup\", (event) => {\n  clearInterval(repeat);\n  if (painting) {\n    event.preventDefault();\n    lastPaint = null;\n    painting = false;\n  }\n});\n\ncanvas.addEventListener(\"mousemove\", (event) => {\n  clearInterval(repeat);\n  smoothPaint(event);\n});\n\ncanvas.addEventListener(\"mouseleave\", (event) => {\n  clearInterval(repeat);\n  lastPaint = null;\n});\n\ncanvas.addEventListener(\"touchstart\", (event) => {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n  let touches = Array.from(event.touches);\n\n  universe.push_undo();\n\n  painting = true;\n  lastPaint = event;\n  handleTouches(event);\n});\n\ncanvas.addEventListener(\"touchend\", (event) => {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n  lastPaint = null;\n  painting = false;\n  clearInterval(repeat);\n});\n\ncanvas.addEventListener(\"touchmove\", (event) => {\n  if (!window.paused) {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n  }\n  clearInterval(repeat);\n  handleTouches(event);\n});\n\nfunction smoothPaint(event) {\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  let startEvent = { clientX: event.clientX, clientY: event.clientY };\n  if (!painting) {\n    return;\n  }\n  let size = 2;\n\n  let i = 0;\n  paint(startEvent);\n  if (\n    lastPaint &&\n    window.UI.state.selectedElement != Species.Fish &&\n    window.UI.state.selectedElement != Species.GoldFish\n  ) {\n    while (eventDistance(startEvent, lastPaint) > size / 3) {\n      let d = eventDistance(startEvent, lastPaint);\n      startEvent = add(\n        startEvent,\n        scale(norm(sub(lastPaint, event)), Math.min(size / 3, d))\n      );\n      i++;\n      if (i > 1000) {\n        break;\n      }\n      paint(startEvent);\n    }\n  }\n  lastPaint = event;\n}\n\nconst handleTouches = (event) => {\n  let touches = Array.from(event.touches);\n  if (touches.length == 1) {\n    smoothPaint(touches[0]);\n  } else {\n    touches.forEach(paint);\n  }\n};\n\nfunction convertEventCoordinates(event) {\n  let bw = 28;\n  let boundingRect = canvas.getBoundingClientRect();\n\n  boundingRect = {\n    left: boundingRect.left + bw,\n    top: boundingRect.top + bw,\n    width: boundingRect.width - bw * 2,\n    height: boundingRect.height - bw * 2,\n  };\n  const scaleX =\n    canvas.width /\n    (ratio * Math.ceil(window.devicePixelRatio)) /\n    boundingRect.width;\n  const scaleY =\n    canvas.height /\n    (ratio * Math.ceil(window.devicePixelRatio)) /\n    boundingRect.height;\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n  const x = Math.min(Math.floor(canvasLeft), width - 1);\n  const y = Math.min(Math.floor(canvasTop), height - 1);\n  return [x, y];\n}\nconst paint = (event) => {\n  if (!painting) {\n    return;\n  }\n\n  const [x, y] = convertEventCoordinates(event);\n  if (window.UI.state.selectedElement < 0) return;\n\n  let size = 4;\n  universe.paint(x, y, size, window.UI.state.selectedElement);\n};\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nconst Info = () => {\n  return (\n    <div className=\"welcome-scrim\">\n      <div className=\"Info window\">\n        <div className=\"title-bar\">\n          <div className=\"title-bar-text\">Information</div>\n          <div className=\"title-bar-controls\">\n            <Link to=\"/\">\n              <button aria-label=\"Minimize\"></button>\n            </Link>\n            <button aria-label=\"Maximize\"></button>\n            <Link to=\"/\">\n              <button aria-label=\"Close\"> </button>\n            </Link>\n          </div>\n        </div>\n        <div className=\"window-body \">\n          {/* <li>A sealed ecosystem simulation </li> */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Info;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Menu = ({ close, children }) => {\n  return (\n    <div className=\"welcome-scrim\">\n      <div id={\"welcome\"}>\n        {children}\n        <Link to=\"/\" className=\"x\" onClick={close}>\n          <button> x</button>\n        </Link>\n      </div>\n    </div>\n  );\n};\nexport default Menu;\n","import React from \"react\";\nimport { Species, SymmetryMode } from \"../../crate/pkg\";\n\nconsole.log(SymmetryMode);\nconsole.log(Species);\n\n// function keys(en) {\n//   return Object.keys(en)\n//     .filter(k => isNaN(parseFloat(k)))\n//     .map(k => {\n//       return { key: k, value: en[k] };\n//     });\n//   // .filter()\n// }\nlet ruleSymbols = {\n  [Species.Empty]: \"🜂\",\n  [Species.Rule1]: \"🝊\",\n  [Species.Rule2]: \"☉\",\n  [Species.Rule3]: \"☽\",\n  [Species.Rule4]: \"🜛\",\n  [Species.Rule5]: \"🜝\",\n  [Species.Rule6]: \"🜏\",\n};\n\nlet SymmetryOptions = [\n  // {\n  //   key: SymmetryMode.None,\n  //   symbol: \"ⵔ\",\n  // },\n  {\n    key: SymmetryMode.Horizontal,\n    symbol: \"🜕\",\n  },\n  // {\n  //   key: SymmetryMode.Vertical,\n  //   symbol: \"🜔\",\n  // },\n  {\n    key: SymmetryMode.Quad,\n    symbol: \"🜨\",\n  },\n];\nlet SlotOptions = [\n  {\n    key: Species.Empty,\n    symbol: ruleSymbols[Species.Empty],\n  },\n  {\n    key: Species.Wild,\n    symbol: \"*\",\n  },\n  {\n    key: Species.Rule1,\n    symbol: ruleSymbols[Species.Rule1],\n  },\n  {\n    key: Species.Rule2,\n    symbol: ruleSymbols[Species.Rule2],\n  },\n  {\n    key: Species.Rule3,\n    symbol: ruleSymbols[Species.Rule3],\n  },\n  {\n    key: Species.Rule4,\n    symbol: ruleSymbols[Species.Rule4],\n  },\n  {\n    key: Species.Rule5,\n    symbol: ruleSymbols[Species.Rule5],\n  },\n  {\n    key: Species.Rule6,\n    symbol: ruleSymbols[Species.Rule6],\n  },\n];\n\nfunction grid_index(x, y) {\n  return y * 3 + x;\n}\nclass Matrix extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  gridSquare(x, y, isSelector, isCenter) {\n    let { grid, options, selectedElement } = this.props;\n    let inactive = isSelector && isCenter;\n    let myCell = grid[grid_index(x, y)];\n    if (inactive) {\n      myCell = selectedElement;\n    }\n    let { symbol } = options.find((m) => m.key == myCell);\n    let incSlot = (i) => {\n      if (inactive) return;\n\n      let { grid, options } = this.props;\n      let slotIndex = options.findIndex((e) => e.key == myCell);\n      slotIndex = (slotIndex + options.length + i) % options.length;\n      if (\n        isCenter &&\n        slotIndex == options.findIndex((e) => e.key === Species.Wild)\n      ) {\n        slotIndex = (slotIndex + options.length + i) % options.length;\n      }\n      let next = options[slotIndex];\n\n      grid[grid_index(x, y)] = next.key;\n      // (myCell + 1) % options.length;\n      let { setGrid } = this.props;\n      setGrid(grid);\n    };\n    let size = isCenter ? 44 : 46;\n    let inset = isCenter ? 4 : 2;\n    return (\n      <g\n        key={`${x}-${y}`}\n        transform={`translate(${x * 51},${y * 51 + 15})`}\n        className={inactive ? \"disabled\" : \"\"}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          incSlot(-1, inactive);\n        }}\n        onClick={() => incSlot(1)}\n        onDrop={(e) => {\n          if (inactive) return;\n\n          var element = e.dataTransfer.getData(\"text\");\n          grid[grid_index(x, y)] = parseInt(element, 10);\n          let { setGrid } = this.props;\n          setGrid(grid);\n        }}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        <foreignObject x={inset} y={inset} width={size} height={size}>\n          <button\n            className=\"mat-box\"\n            draggable=\"true\"\n            style={{\n              width: size - inset,\n              height: size - inset,\n              filter: \"saturate(0.8)\",\n              color: symbol == \"*\" ? \"#888\" : \"black\",\n              backgroundColor:\n                symbol == \"*\" ? \"#b0b0b055\" : window.pallette[myCell],\n              borderColor:\n                symbol == \"*\" ? \"#b0b0b055\" : window.pallette[myCell],\n              borderWidth: 3,\n              fontSize: \"30px\",\n              borderStyle: \" outset\",\n              lineHeight: 0,\n              verticalAlign: \"middle\",\n            }}\n            onDragStart={(e) => {\n              e.dataTransfer.setData(\"text/plain\", myCell);\n            }}\n          >\n            {inactive || symbol == \"?\" ? ruleSymbols[selectedElement] : symbol}\n          </button>\n        </foreignObject>\n      </g>\n    );\n  }\n  render() {\n    // let { data } = this.state;\n    let { isSelector } = this.props;\n    return (\n      <g>\n        {[\n          this.gridSquare(0, 0, isSelector),\n          this.gridSquare(0, 1, isSelector),\n          this.gridSquare(0, 2, isSelector),\n\n          this.gridSquare(1, 0, isSelector),\n          this.gridSquare(1, 1, isSelector, true),\n          this.gridSquare(1, 2, isSelector),\n\n          this.gridSquare(2, 0, isSelector),\n          this.gridSquare(2, 1, isSelector),\n          this.gridSquare(2, 2, isSelector),\n        ]}\n      </g>\n    );\n  }\n}\n\nexport { Matrix, ruleSymbols, SymmetryOptions, SlotOptions };\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Clause, Selector, Effector } from \"../../crate/pkg\";\nimport { Matrix, SymmetryOptions, SlotOptions } from \"./matrix\";\n\nlet probabilityMap = [\n  { p: 0, symbol: \"×\" },\n  { p: 1, symbol: \"⚀\" },\n  { p: 2, symbol: \"⚁\" },\n  { p: 3, symbol: \"⚂\" },\n  { p: 4, symbol: \"⚃\" },\n  { p: 5, symbol: \"⚄\" },\n  { p: 6, symbol: \"⚅\" },\n];\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedElement: props.selectedElement,\n      clause_index: props.clause_index,\n      clause: Editor.getRule(props.selectedElement, props.clause_index),\n    };\n    window.Editor = this;\n  }\n  static getRule(selectedElement, clause_index) {\n    console.log(selectedElement, clause_index);\n    let clause = window.u.clause(selectedElement, clause_index);\n    // let clause = rule.clause(clause_index);\n    const selector = Array.from(\n      new Uint8Array(memory.buffer, clause.selector.grid(), 9)\n    );\n    const effector = Array.from(\n      new Uint8Array(memory.buffer, clause.effector.grid(), 9)\n    );\n    const symmetry = clause.symmetry();\n    const probability = clause.probability();\n    return {\n      selector,\n      effector,\n      symmetry,\n      probability: probabilityMap.find((v) => v.p == probability),\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    let { selectedElement, clause_index } = props;\n    if (selectedElement != state.selectedElement && selectedElement <= 6) {\n      return {\n        selectedElement,\n        clause: Editor.getRule(selectedElement, clause_index),\n      };\n    }\n\n    return null;\n  }\n  setRule() {\n    let { clause } = this.state;\n    let {\n      selector: j_selector,\n      effector: j_effector,\n      symmetry: j_symmetry,\n      probability,\n    } = clause;\n\n    let selector = new Selector(...j_selector);\n    let effector = new Effector(...j_effector);\n    let r_clause = new Clause(\n      probability.p,\n      SymmetryOptions[j_symmetry].key,\n      selector,\n      effector\n    );\n    window.u.set_clause(\n      r_clause,\n      this.props.selectedElement,\n      this.props.clause_index\n    );\n  }\n\n  incSymmetry(i) {\n    let { clause } = this.state;\n    let { symmetry } = clause;\n\n    clause.symmetry =\n      (SymmetryOptions.length + symmetry + i) % SymmetryOptions.length;\n\n    this.setState(\n      {\n        clause,\n      },\n      this.setRule\n    );\n  }\n\n  incProbability(i) {\n    let { clause } = this.state;\n    let { probability } = clause;\n\n    let pIndex = probabilityMap.indexOf(probability);\n    pIndex = (probabilityMap.length + pIndex + i) % probabilityMap.length;\n    console.log(probabilityMap[pIndex]);\n    clause.probability = probabilityMap[pIndex];\n\n    this.setState(\n      {\n        clause,\n      },\n      this.setRule\n    );\n  }\n\n  render() {\n    let { selectedElement } = this.props;\n    let { clause } = this.state;\n    // console.log(clause);\n    let { selector, effector, symmetry, probability } = clause;\n    return (\n      <div className=\"MatrixMenu\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 15 355 170\"\n          width=\"100%\"\n        >\n          <g\n            transform=\"translate(178,0)\"\n            className={classNames({ disabled: probability.p == 0 }, \"symmetry\")}\n          >\n            {/* <circle\n              cx={0}\n              cy={42}\n              r=\"20\"\n              className=\"mat-circle\"\n              style={{\n                strokeWidth: 1,\n                fill: \"rgba(255,255,255,0.0)\",\n              }}\n            ></circle> */}\n\n            <text\n              x=\"0\"\n              y={42 + 4}\n              style={{ fontSize: \"30px\" }}\n              onContextMenu={(e) => {\n                e.preventDefault();\n                this.incSymmetry(-1);\n              }}\n              onClick={() => this.incSymmetry(1)}\n            >\n              {SymmetryOptions[symmetry].symbol}\n            </text>\n          </g>\n          {/* <circle\n            cx={8}\n            cy={125}\n            r=\"20\"\n            className=\"mat-circle\"\n            style={{\n              strokeWidth: 1,\n              fill: \"rgba(255,255,255,0.2)\",\n            }}\n          ></circle> */}\n\n          {/* <text\n            x=\"8\"\n            y=\"129\"\n            style={{ fontSize: \"35px\" }}\n            onContextMenu={(e) => {\n              e.preventDefault();\n              this.incProbability(-1);\n            }}\n            onClick={() => this.incProbability(1)}\n          >\n            {probability.symbol}\n          </text> */}\n\n          <g className={classNames({ disabled: probability.p == 0 }, \"clause\")}>\n            <g transform=\"translate(0,0)\">\n              {selector && (\n                <Matrix\n                  selectedElement={selectedElement}\n                  options={SlotOptions}\n                  grid={selector}\n                  isSelector\n                  setGrid={(newGrid) => {\n                    let { clause } = this.state;\n                    clause.selector = newGrid;\n                    this.setState({ clause }, this.setRule);\n                  }}\n                />\n              )}\n            </g>\n            <g transform=\"translate(169,78)\">\n              <image href=\"assets/gold_arrow.png\" height=\"28\" width=\"23\" />\n            </g>\n            <g transform=\"translate(200,0)\">\n              {effector && (\n                <Matrix\n                  selectedElement={selectedElement}\n                  options={SlotOptions}\n                  grid={effector}\n                  setGrid={(newGrid) => {\n                    let { clause } = this.state;\n                    clause.effector = newGrid;\n                    this.setState({ clause }, this.setRule);\n                  }}\n                />\n              )}\n            </g>\n          </g>\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport { Editor, probabilityMap };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { memory } from \"../../crate/pkg/sandtable_bg\";\nimport { Species } from \"../../crate/pkg/sandtable\";\n\nimport { height, universe, width, reset } from \"../index.js\";\nimport { exportGif, pallette } from \"../render.js\";\nimport Menu from \"./menu.js\";\nimport { Editor, probabilityMap } from \"./editor\";\nimport { ruleSymbols, SymmetryOptions } from \"./matrix\";\nimport { Clause, Selector, Effector } from \"../../crate/pkg\";\n\nwindow.species = Species;\nlet pallette_data = pallette();\nwindow.pallette = pallette_data;\n\nfunction resetClause(element, clause_index) {\n  let selector = new Selector(\n    Species.Wild,\n    Species.Wild,\n    Species.Wild,\n\n    Species.Wild,\n    element,\n    Species.Wild,\n\n    Species.Wild,\n    Species.Wild,\n    Species.Wild\n  );\n  let effector = new Effector(\n    Species.Wild,\n    Species.Wild,\n    Species.Wild,\n\n    Species.Wild,\n    element,\n    Species.Wild,\n\n    Species.Wild,\n    Species.Wild,\n    Species.Wild\n  );\n  let r_clause = new Clause(\n    probabilityMap[1].p,\n    SymmetryOptions[0].key,\n    selector,\n    effector\n  );\n  universe.set_clause(r_clause, element, clause_index);\n}\nconst ElementButton = (name, selectedElement, setElement) => {\n  let elementID = Species[name];\n\n  let color = pallette_data[elementID];\n\n  let selected = elementID == selectedElement;\n\n  let background = \"inherit\";\n\n  let text = name;\n  if (ruleSymbols[elementID]) {\n    text = ruleSymbols[elementID];\n  }\n\n  return (\n    <button\n      className={selected ? `selected ${name}` : name}\n      key={name}\n      draggable\n      onDragStart={(e) => {\n        // e.currentTarget.style.boxShadow = \"none\";\n        e.dataTransfer.setData(\"text/plain\", elementID);\n      }}\n      onClick={() => {\n        setElement(elementID);\n      }}\n      style={{\n        background,\n        backgroundColor: color,\n        borderColor: color,\n        filter: selected || `saturate(0.8) `,\n        // lineHeight: 0\n      }}\n    >\n      {\"  \"}\n      {text}\n      {\"  \"}\n    </button>\n  );\n};\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      submissionMenuOpen: false,\n      paused: false,\n      ff: false,\n      submitting: false,\n      size: 1,\n      dataURL: null,\n      currentSubmission: null,\n      selectedElement: Species.Rule2,\n    };\n    window.UI = this;\n  }\n\n  componentDidUpdate(prevProps) {}\n  togglePause() {\n    window.paused = !this.state.paused;\n    this.setState({ paused: !this.state.paused });\n  }\n  toggleFF() {\n    window.ff = !this.state.ff;\n    this.setState({ ff: !this.state.ff });\n  }\n  play() {\n    window.paused = false;\n    this.setState({ paused: false });\n  }\n  pause() {\n    window.paused = true;\n    this.setState({ paused: true });\n  }\n\n  setSize(event, size) {\n    event.preventDefault();\n    this.setState({\n      size,\n    });\n  }\n  reset() {\n    // if (window.confirm(\"Reset your ecosystem?\")) {\n    this.play();\n    this.setState({ currentSubmission: null });\n\n    reset();\n    // }\n  }\n\n  closeMenu() {\n    this.play();\n    this.setState({ dataURL: null });\n  }\n  upload() {\n    console.log(\"saving\");\n    // let dataURL = snapshot(universe);\n    const cells = new Uint8Array(\n      memory.buffer,\n      universe.cells(),\n      width * height * 4\n    );\n\n    // Create canvas\n    let canvas = document.createElement(\"canvas\"),\n      context = canvas.getContext(\"2d\"),\n      imgData = context.createImageData(width, height);\n\n    canvas.height = height;\n    canvas.width = width;\n\n    // fill imgData with data from cells\n    for (var i = 0; i < width * height * 4; i++) {\n      if (i % 4 == 3) {\n        imgData.data[i] = 255;\n      } else {\n        imgData.data[i] = cells[i];\n      }\n    }\n    // put data to context at (0, 0)\n    context.putImageData(imgData, 0, 0);\n\n    let cellData = canvas.toDataURL(\"image/png\");\n    let dataString = JSON.stringify(cellData);\n    try {\n      // localStorage.setItem(\"cell_data\", dataString);\n      // localStorage.setItem(\"time\", window.t);\n    } catch {\n      console.log(\"store failed\");\n    }\n\n    try {\n    } catch {\n      console.log(\"store failed\");\n    }\n  }\n  currentDateString() {\n    let date = new Date();\n    return `${date.getMonth()}-${date.getDate()}`;\n  }\n\n  load() {\n    console.log(\"loading\");\n    return;\n    var cellData = JSON.parse(localStorage.getItem(\"cell_data\"));\n\n    if (!cellData) {\n      console.log(\"no save\");\n      window.setInterval(() => this.upload(), 1000 * 10);\n\n      return;\n    }\n\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext(\"2d\");\n    var img = new Image();\n    img.src = cellData;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n      var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n      const cellsData = new Uint8Array(\n        memory.buffer,\n        universe.cells(),\n        width * height * 4\n      );\n\n      // universe.reset();\n\n      for (var i = 0; i < width * height * 4; i++) {\n        cellsData[i] = imgData.data[i];\n      }\n\n      window.setInterval(() => this.upload(), 1000 * 10);\n    };\n\n    // universe.flush_undos();\n    // universe.push_undo();\n    // this.pause();\n  }\n\n  render() {\n    let { ff, selectedElement, currentSubmission, paused } = this.state;\n    let hash =\n      currentSubmission && currentSubmission.id\n        ? `#${currentSubmission.id}`\n        : \"\";\n\n    let activeSpecies = Object.keys(Species).filter(\n      (name) => name.length > 2 && name != \"Wild\"\n    );\n\n    return (\n      <div className=\"window fade \" id=\"HUD\">\n        <div className=\"title-bar\">\n          {\" \"}\n          <div className=\"title-bar-text\">Alchemi Online</div>\n          <div className=\"title-bar-controls\">\n            {/* <button\n              aria-label=\"Minimize\"\n              onClick={() => {\n                document.body.classList.add(\"faded\");\n              }}\n            ></button>\n            <button aria-label=\"Maximize\"></button> */}\n            <button\n              onClick={() => {\n                this.reset();\n              }}\n            >\n              ×\n            </button>\n          </div>\n        </div>\n        <div className=\"window-body hud-body\">\n          <div id=\"hud-buttons\">\n            {/* <OrganicButton\n              onClick={() => this.togglePause()}\n              className={paused ? \"selected\" : \"\"}\n            >\n              {paused ? (\n                <svg\n                  className=\"bsvg\"\n                  height=\"20\"\n                  width=\"20\"\n                  id=\"d\"\n                  viewBox=\"-50 -50 400 400\"\n                >\n                  <polygon id=\"play\" points=\"0,0 , 300,150 0,300\" />\n                </svg>\n              ) : (\n                <svg\n                  className=\"bsvg\"\n                  height=\"20\"\n                  width=\"20\"\n                  id=\"d\"\n                  viewBox=\"-50 -50 400 400\"\n                >\n                  <polygon id=\"bar2\" points=\"0,0 110,0 110,300 0,300\" />\n                  <polygon id=\"bar1\" points=\"190,0 300,0 300,300 190,300\" />\n                </svg>\n              )}\n            </OrganicButton> */}\n            {/* <OrganicButton\n              onClick={() => this.toggleFF()}\n              className={ff ? \"selected\" : \"\"}\n              active={ff}\n            >\n              <svg\n                className=\"bsvg\"\n                height=\"20\"\n                width=\"20\"\n                id=\"d\"\n                viewBox=\"-25 0 350 300\"\n              >\n                <polygon id=\"play\" points=\"0,50 , 150,150 0,250\" />\n                <polygon id=\"play\" points=\"150,50, 300,150 150,250\" />\n              </svg>\n            </OrganicButton> */}\n\n            {/* <OrganicButton onClick={() => this.reset()}>↻</OrganicButton> */}\n            {/* <Link\n              to={{\n                pathname: \"/info/\",\n                hash\n              }}\n            >\n              <OrganicButton style={{ width: \"calc(100% - 4px)\" }}>\n                Info\n              </OrganicButton>\n            </Link> */}\n\n            {/* <OrganicButton\n              onClick={() => {\n                // reset();\n                universe.pop_undo();\n              }}\n              style={{ fontSize: 18, lineHeight: 0 }}\n            >\n              ↜\n            </OrganicButton> */}\n            {/* \n            <OrganicButton\n              onClick={() => {\n                exportGif(universe, blob => {\n                  this.pause();\n\n                  this.setState({ dataURL: blob });\n                });\n              }}\n            >\n              📷\n            </OrganicButton> */}\n\n            {activeSpecies.map((n) =>\n              ElementButton(n, selectedElement, (id) =>\n                this.setState({ selectedElement: id })\n              )\n            )}\n            <img style={{ width: \"100%\" }} src=\"assets/barb_wire.gif\"></img>\n            <>\n              <Editor\n                selectedElement={selectedElement}\n                clause_index={0}\n              ></Editor>\n              <Editor\n                selectedElement={selectedElement}\n                clause_index={1}\n              ></Editor>\n              <Editor\n                selectedElement={selectedElement}\n                clause_index={2}\n              ></Editor>\n              <div className=\"hint\">drag and drop tiles to construct rules</div>\n\n              <button\n                onClick={() => {\n                  let s = selectedElement;\n                  resetClause(selectedElement, 0);\n                  resetClause(selectedElement, 1);\n                  resetClause(selectedElement, 2);\n                  this.setState(\n                    {\n                      selectedElement:\n                        (selectedElement + 1) % activeSpecies.length,\n                    },\n                    () => this.setState({ selectedElement: s })\n                  );\n                }}\n                id=\"clear-button\"\n              >\n                {\" \"}\n                reset\n              </button>\n            </>\n\n            {this.state.dataURL && (\n              <Menu close={() => this.closeMenu()}>\n                <img src={this.state.dataURL} className=\"submissionImg\" />\n                <div style={{ display: \"flex\" }}></div>\n              </Menu>\n            )}\n            {/* <img\n              style={{ width: \"100%\" }}\n              src=\"http://community.fortunecity.ws/tinpan/motorhead/13/images/barb_wire.gif\"\n            ></img> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { Index, ruleSymbols };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Info from \"./components/info\";\nimport { Index } from \"./components/ui\";\nimport Menu from \"./components/menu\";\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <Route path=\"/\" component={Index} />\n      <Route exact path=\"/info/\" component={Info} />\n    </Router>\n  );\n}\n\nfunction startApp() {\n  ReactDOM.render(<AppRouter />, document.getElementById(\"ui\"));\n}\nexport { startApp };\n","import { Universe, Species } from \"../crate/pkg\";\n\nimport { startWebGL } from \"./render\";\nimport { fps } from \"./fps\";\nimport {} from \"./paint\";\nimport {} from \"./setup\";\nimport { startApp } from \"./app\";\n\nlet ratio = 8;\nlet width = 128;\n// window.innerWidth / ratio;\nlet height = 128;\n// window.innerHeight / ratio;\n//todo scale ratio according to size;\n\nlet n = Math.min(width, height);\nlet h = n / 2;\nlet d = n - 6;\n\nconsole.log(width, height);\nconst universe = Universe.new(width, height);\n\nfunction drawBowl() {\n  universe.paint(h, h, d + 2, Species.Rule1);\n  // universe.paint(h - 30, d - 3, 20, Species.Rule1);\n  // universe.paint(h + 30, d - 3, 20, Species.Rule1);\n  universe.paint(h, h, d - 2, Species.Empty);\n}\nwindow.u = universe;\nwindow.universe = universe;\n\nstartApp();\ndrawBowl();\n\nconst canvas = document.getElementById(\"sand-canvas\");\n\ncanvas.width = width * ratio * Math.ceil(window.devicePixelRatio);\ncanvas.height = height * ratio * Math.ceil(window.devicePixelRatio);\n\nconst HUD = document.getElementById(\"HUD\");\n// let canvasSize;\nlet resize = () => {\n  let screen_width = window.innerWidth;\n  let HUDheight = 34;\n  let screen_height = window.innerHeight - HUDheight;\n\n  let canvasStyle = \"\";\n  let HUDStyle = \"\";\n  let border = 40 * 2;\n\n  // if (screen_width - 150 > screen_height) {\n  // if (screen_width - window.innerHeight < 400) {\n  // landscape compressed\n\n  let hudWidth = 357;\n\n  canvasStyle = `height: ${Math.min(\n    window.innerHeight - border - HUDheight,\n    // Infinity\n    window.innerWidth - (hudWidth + border + 40)\n  )}px; margin:10px; margin-right: ${hudWidth + 40}px; margin-left:auto;`;\n  // canvasSize = window.innerHeight - border;\n\n  HUDStyle = `width: ${hudWidth}px; margin: 10px;`;\n\n  if (screen_width < 600) {\n    HUDStyle = `margin: 40px 10px; margin-top:${\n      screen_width + 10\n    }px; margin-bottom: ${HUDheight}px ;padding-bottom: 40px`;\n    canvasStyle = `width:${screen_width - border}; height: ${\n      screen_width - border\n    }px; top: 10px; margin:auto; margin-top:10px ; `;\n  }\n  // } else {\n  // landscape wide\n  // canvasStyle = `height: ${window.innerHeight}px`;\n  // canvasSize = window.innerHeight - border;\n  // let hudWidth = (screen_width - window.innerHeight) / 2 - 7;\n  // HUDStyle = `width: ${hudWidth}px; margin: 2px;`;\n  // }\n  //  else {\n  //portrait (mobile)\n  // canvasSize = screen_width;\n  // canvasStyle = `width: ${screen_width}px; `;\n  HUD.style = HUDStyle;\n  canvas.style = canvasStyle;\n};\n\nresize();\nwindow.addEventListener(\"deviceorientation\", resize, true);\nwindow.addEventListener(\"resize\", resize);\n\nlet drawSand = startWebGL({ canvas, universe });\n\nlet t = parseInt(localStorage.getItem(\"time\"), 10) || 0;\nconst renderLoop = () => {\n  const now = performance.now();\n\n  let max_tick_per_frame = window.ff ? 100 : 1;\n  for (var i = 0; i < max_tick_per_frame; i++) {\n    if (!window.paused) {\n      fps.render(); // new\n      universe.tick();\n    }\n    let elapsed_time = performance.now() - now;\n    if (elapsed_time > 16) {\n      break;\n    }\n  }\n  window.t = t;\n  drawSand.draw();\n  requestAnimationFrame(renderLoop);\n};\nfunction reset() {\n  console.log(\"reseting\");\n  localStorage.setItem(\"cell_data\", null);\n  universe.reset();\n  drawBowl();\n}\n\n// window.Editor.setRule();\n\nrenderLoop();\n\nwindow.UI.load();\n\nexport { canvas, width, height, ratio, universe, reset };\n","import * as wasm from './sandtable_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\n/**\n*/\nexport const Species = Object.freeze({ Wild:11,\"11\":\"Wild\",Empty:0,\"0\":\"Empty\",Rule1:1,\"1\":\"Rule1\",Rule2:2,\"2\":\"Rule2\",Rule3:3,\"3\":\"Rule3\",Rule4:4,\"4\":\"Rule4\",Rule5:5,\"5\":\"Rule5\",Rule6:6,\"6\":\"Rule6\", });\n/**\n*/\nexport const SymmetryMode = Object.freeze({ Horizontal:0,\"0\":\"Horizontal\",Quad:1,\"1\":\"Quad\", });\n/**\n*/\nexport class Cell {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_cell_free(ptr);\n    }\n}\n/**\n*/\nexport class Clause {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Clause.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_clause_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get probability() {\n        var ret = wasm.__wbg_get_clause_probability(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set probability(arg0) {\n        wasm.__wbg_set_clause_probability(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get symmetry() {\n        var ret = wasm.__wbg_get_clause_symmetry(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set symmetry(arg0) {\n        wasm.__wbg_set_clause_symmetry(this.ptr, arg0);\n    }\n    /**\n    * @returns {Selector}\n    */\n    get selector() {\n        var ret = wasm.__wbg_get_clause_selector(this.ptr);\n        return Selector.__wrap(ret);\n    }\n    /**\n    * @param {Selector} arg0\n    */\n    set selector(arg0) {\n        _assertClass(arg0, Selector);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_clause_selector(this.ptr, ptr0);\n    }\n    /**\n    * @returns {Effector}\n    */\n    get effector() {\n        var ret = wasm.__wbg_get_clause_effector(this.ptr);\n        return Effector.__wrap(ret);\n    }\n    /**\n    * @param {Effector} arg0\n    */\n    set effector(arg0) {\n        _assertClass(arg0, Effector);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_clause_effector(this.ptr, ptr0);\n    }\n    /**\n    * @param {number} probability\n    * @param {number} symmetry\n    * @param {Selector} selector\n    * @param {Effector} effector\n    */\n    constructor(probability, symmetry, selector, effector) {\n        _assertClass(selector, Selector);\n        var ptr0 = selector.ptr;\n        selector.ptr = 0;\n        _assertClass(effector, Effector);\n        var ptr1 = effector.ptr;\n        effector.ptr = 0;\n        var ret = wasm.clause_new(probability, symmetry, ptr0, ptr1);\n        return Clause.__wrap(ret);\n    }\n    /**\n    * @returns {Clause}\n    */\n    static new_null() {\n        var ret = wasm.clause_new_null();\n        return Clause.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    symmetry() {\n        var ret = wasm.__wbg_get_clause_symmetry(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    probability() {\n        var ret = wasm.__wbg_get_clause_probability(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nexport class Effector {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Effector.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_effector_free(ptr);\n    }\n    /**\n    * @param {number} v1\n    * @param {number} v2\n    * @param {number} v3\n    * @param {number} v4\n    * @param {number} v5\n    * @param {number} v6\n    * @param {number} v7\n    * @param {number} v8\n    * @param {number} v9\n    */\n    constructor(v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var ret = wasm.effector_new(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return Effector.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    grid() {\n        var ret = wasm.effector_grid(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nexport class Rule {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Rule.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_rule_free(ptr);\n    }\n    /**\n    * @param {Clause} c0\n    * @param {Clause} c1\n    * @param {Clause} c2\n    */\n    constructor(c0, c1, c2) {\n        _assertClass(c0, Clause);\n        var ptr0 = c0.ptr;\n        c0.ptr = 0;\n        _assertClass(c1, Clause);\n        var ptr1 = c1.ptr;\n        c1.ptr = 0;\n        _assertClass(c2, Clause);\n        var ptr2 = c2.ptr;\n        c2.ptr = 0;\n        var ret = wasm.rule_new(ptr0, ptr1, ptr2);\n        return Rule.__wrap(ret);\n    }\n    /**\n    * @param {number} i\n    * @returns {Clause}\n    */\n    clause(i) {\n        var ret = wasm.rule_clause(this.ptr, i);\n        return Clause.__wrap(ret);\n    }\n    /**\n    * @param {Clause} c\n    * @param {number} i\n    */\n    set_clause(c, i) {\n        _assertClass(c, Clause);\n        wasm.rule_set_clause(this.ptr, c.ptr, i);\n    }\n}\n/**\n*/\nexport class Selector {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Selector.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_selector_free(ptr);\n    }\n    /**\n    * @param {number} v1\n    * @param {number} v2\n    * @param {number} v3\n    * @param {number} v4\n    * @param {number} v5\n    * @param {number} v6\n    * @param {number} v7\n    * @param {number} v8\n    * @param {number} v9\n    */\n    constructor(v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var ret = wasm.effector_new(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return Selector.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    grid() {\n        var ret = wasm.effector_grid(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nexport class Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_universe_free(ptr);\n    }\n    /**\n    */\n    reset() {\n        wasm.universe_reset(this.ptr);\n    }\n    /**\n    */\n    tick() {\n        wasm.universe_tick(this.ptr);\n    }\n    /**\n    * @param {number} i\n    * @returns {Rule}\n    */\n    rule(i) {\n        var ret = wasm.universe_rule(this.ptr, i);\n        return Rule.__wrap(ret);\n    }\n    /**\n    * @param {number} ri\n    * @param {number} ci\n    * @returns {Clause}\n    */\n    clause(ri, ci) {\n        var ret = wasm.universe_clause(this.ptr, ri, ci);\n        return Clause.__wrap(ret);\n    }\n    /**\n    * @param {Rule} rule\n    * @param {number} i\n    */\n    set_rule(rule, i) {\n        _assertClass(rule, Rule);\n        wasm.universe_set_rule(this.ptr, rule.ptr, i);\n    }\n    /**\n    * @param {Clause} clause\n    * @param {number} ri\n    * @param {number} ci\n    */\n    set_clause(clause, ri, ci) {\n        _assertClass(clause, Clause);\n        wasm.universe_set_clause(this.ptr, clause.ptr, ri, ci);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        var ret = wasm.universe_width(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        var ret = wasm.universe_height(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        var ret = wasm.universe_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @param {number} size\n    * @param {number} species\n    */\n    paint(x, y, size, species) {\n        wasm.universe_paint(this.ptr, x, y, size, species);\n    }\n    /**\n    */\n    push_undo() {\n        wasm.universe_push_undo(this.ptr);\n    }\n    /**\n    */\n    pop_undo() {\n        wasm.universe_pop_undo(this.ptr);\n    }\n    /**\n    */\n    flush_undos() {\n        wasm.universe_flush_undos(this.ptr);\n    }\n    /**\n    * @param {number} t\n    */\n    set_time(t) {\n        wasm.universe_set_time(this.ptr, t);\n    }\n    /**\n    */\n    inc_time() {\n        wasm.universe_inc_time(this.ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Universe}\n    */\n    static new(width, height) {\n        var ret = wasm.universe_new(width, height);\n        return Universe.__wrap(ret);\n    }\n}\n\nexport const __wbg_random_a3b3bcffa2ed629c = typeof Math.random == 'function' ? Math.random : notDefined('Math.random');\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nuniform float t;\\nuniform float skyTime;\\n\\nuniform float dpi;\\nuniform vec2 resolution;\\nuniform bool isSnapshot;\\nuniform sampler2D backBuffer;\\nuniform sampler2D dataTexture;\\n\\nvarying vec2 uv;\\nconst float PI2 = 2. * 3.14159265358979323846;\\n\\n// clang-format off\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_0(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_0(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_0(vec4 x) {\\n     return mod289_0(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise_0(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_0 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_0;\\n  vec3 i1 = min( g_0.xyz, l.zxy );\\n  vec3 i2 = max( g_0.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_0(i);\\n  vec4 p = permute_0( permute_0( permute_0(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_1(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_1(vec3 x) {\\n  return mod289_1(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_1(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_1(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_1( permute_1( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\nhighp float random(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n// clang-format on\\n\\nvoid main() {\\n  vec2 guv = uv;\\n  vec3 color;\\n  vec2 grid = floor(guv * (resolution / (dpi * 2.)));\\n\\n  grid = floor(guv * (resolution / dpi));\\n\\n  float noise = snoise_0(vec3(grid, t * 0.05));\\n\\n  vec2 textCoord = (guv * vec2(0.5, -0.5)) + vec2(0.5);\\n\\n  vec4 data = texture2D(dataTexture, textCoord);\\n  vec4 last = texture2D(backBuffer, vec2(textCoord.x, 1.0 - textCoord.y));\\n\\n  int type = int((data.r * 255.) + 0.1);\\n  float energy = data.g;\\n  float age = data.b;\\n\\n  float hue = 0.0;\\n  float saturation =  0.3 + (energy*1.9) + (age *0.2) ;\\n  float lightness = 0.7 - energy * .1;\\n  float a = 1.0;\\n  float brightness = 0.0;\\n\\n  if (type == 0) { // Air\\n    hue = 0.0;\\n    saturation = 0.1;\\n    a = 0.0 ;\\n    if (isSnapshot) {\\n    lightness = 1.0;\\n\\n      a = 0.9;\\n    }\\n  } else if (type == 1) { // Glass\\n    hue = 0.1;\\n    saturation *= 0.3;\\n    // lightness = 0.7;\\n  } else if (type == 2) { // Sand\\n    hue = 0.1;\\n    lightness += 0.1;\\n  } else if (type == 3) { // plant\\n    hue = 0.4;\\n    saturation += 0.2;\\n    // lightness-=0.1;\\n  } else if (type == 4) { // water\\n    hue = 0.58;\\n    // saturation -= 0.05;\\n    lightness -= noise * 0.1;\\n    // a = 0.9;\\n    if (isSnapshot) {\\n      a = 1.0;\\n    }\\n  } else if (type == 5) { // fire\\n    hue = 0.05 + (noise * -0.1);\\n    saturation += 0.2;\\n\\n   lightness = 0.65+ energy * 1.7;\\n\\n    //  * (noise + 0.5);\\n    if (isSnapshot) {\\n      hue += -0.1;\\n    }\\n\\n  } else if (type == 6) { // purple\\n    hue = 0.8;\\n    lightness += 0.2;\\n    hue += energy * 0.2;\\n  }\\n  if (isSnapshot == false) {\\n    lightness *= (0.975 + snoise_1(floor(guv * resolution / dpi)) * 0.15);\\n  }\\n  saturation = min(saturation, 1.0);\\n  lightness = min(lightness, 1.0);\\n  color = hsv2rgb(vec3(hue, saturation, lightness));\\n  // a = 1.0;\\n  // if (last.a > 0.7) {\\n  //   color.rgb = last.rgb;\\n  //   a = last.a * 0.95;\\n  // }\\n  // color.rgb = max(color.rgb, last.rgb * 0.97);\\n\\n  gl_FragColor = vec4(color, a);\\n}\"","module.exports = \"\\n// boring \\\"pass-through\\\" vertex shader\\nprecision mediump float;\\n#define GLSLIFY 1\\nattribute vec2 position;\\nvarying vec2 uv;\\nvoid main() {\\n  uv = position;\\n  gl_Position = vec4(position, 0, 1);\\n}\"","// if (window.safari) {\n//   history.pushState(null, null, location.href);\n//   window.onpopstate = function(event) {\n//     history.go(1);\n//   };\n// }\n\n// let background = document.getElementById(\"background\");\nlet fadeTimout = 1000 * 30;\nlet timeout = window.setTimeout(() => {\n  if (window.UI.state.tutorialProgress > 3) {\n    document.body.classList.add(\"faded\");\n  }\n}, fadeTimout);\n\nlet handleActivity = e => {\n  window.clearTimeout(timeout);\n  document.body.classList.remove(\"faded\");\n  timeout = window.setTimeout(() => {\n    if (window.UI.state.tutorialProgress > 3) {\n      document.body.classList.add(\"faded\");\n    }\n  }, fadeTimout);\n};\ndocument.body.addEventListener(\"mousemove\", handleActivity);\ndocument.body.addEventListener(\"touchstart\", handleActivity);\n\n// background.addEventListener(\"touchmove\", e => {\n//   if (!window.paused) {\n//     if (e.cancelable) {\n//       e.preventDefault();\n//     }\n//   }\n// });\n\n// if (\"serviceWorker\" in navigator) {\n//   window.addEventListener(\"load\", () => {\n//     navigator.serviceWorker\n//       .register(\"/service-worker.js\")\n//       .then(registration => {\n//         console.log(\"SW registered: \", registration);\n//       })\n//       .catch(registrationError => {\n//         console.log(\"SW registration failed: \", registrationError);\n//       });\n//   });\n// }\n"],"sourceRoot":""}