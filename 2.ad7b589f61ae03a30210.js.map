{"version":3,"sources":["webpack:///./js/render.js","webpack:///./js/fps.js","webpack:///./js/paint.js","webpack:///./js/boot.js","webpack:///./js/components/info.js","webpack:///./js/components/menu.js","webpack:///./js/components/matrix.js","webpack:///./js/components/editor.js","webpack:///./js/components/rules.js","webpack:///./js/components/ui.js","webpack:///./js/app.js","webpack:///./js/index.js","webpack:///./crate/pkg/sandtable_bg.js","webpack:///./js/glsl/sand.glsl","webpack:///./js/glsl/sandVertex.glsl","webpack:///./js/setup.js"],"names":["reglBuilder","require","window","memory","fsh","vsh","startWebGL","regl","canvas","universe","isSnapshot","gl","lastFrame","attributes","preserveDrawingBuffer","texture","width","height","cell_pointer","cells","Uint8Array","buffer","dataTexture","data","drawSand","blend","enable","func","srcRGB","srcAlpha","dstRGB","dstAlpha","equation","rgb","alpha","color","frag","uniforms","t","tick","resolution","viewportWidth","viewportHeight","dpi","ratio","backBuffer","vert","position","count","draw","poll","fps","this","document","getElementById","frames","lastFrameTimeStamp","performance","now","delta","push","length","shift","min","Infinity","max","sum","i","Math","mean","textContent","round","toString","padStart","eventDistance","a","b","sqrt","pow","clientX","clientY","norm","mag","magnitude","scale","s","add","sub","painting","lastPaint","repeat","smoothPaint","event","clearInterval","setInterval","paint","startEvent","d","addEventListener","preventDefault","push_undo","body","cancelable","Array","from","touches","handleTouches","paused","forEach","boundingRect","getBoundingClientRect","left","top","bw","scaleX","ceil","devicePixelRatio","scaleY","canvasLeft","canvasTop","floor","convertEventCoordinates","x","y","UI","state","selectedElement","sleep","ms","Promise","resolve","setTimeout","boot","r","rr","Species","Empty","cos","PI","sin","Info","className","to","aria-label","Menu","close","children","id","onClick","ruleSymbols","Rule1","Rule2","Rule3","Rule4","Rule5","Rule6","SymmetryOptions","key","SymmetryMode","Horizontal","symbol","Quad","SlotOptions","Wild","grid_index","Matrix","props","isSelector","isCenter","grid","options","inactive","myCell","find","m","incSlot","slotIndex","findIndex","e","next","setGrid","isWild","transform","onContextMenu","onDrop","element","dataTransfer","getData","elementID","parseInt","onDragOver","draggable","style","size","filter","backgroundColor","pallette","borderColor","backgroundImage","backgroundSize","borderWidth","fontSize","borderStyle","lineHeight","verticalAlign","onDragStart","setData","isDisabled","classNames","disabled","gridSquare","React","Component","probabilityMap","p","Editor","clause_index","clause","getRule","heat","console","log","pollHeat","total","heatmap","setState","j_selector","selector","j_effector","effector","j_symmetry","symmetry","probability","Selector","Effector","r_clause","Clause","u","set_clause","setRule","pIndex","indexOf","opacity","gridColumn","gridRow","incSymmetry","src","margin","incProbability","overflow","willChange","newGrid","slice","v","error","swapClauses","c1","c2","new_s","new_e","clause2","mutate","elementHist","random","values","Object","keys","ele","n","effectorValues","species","pallette_data","createElement","k","isNaN","parseFloat","range","Universe","reset","render","ctx","getContext","readPixels","RGBA","UNSIGNED_BYTE","colors","index","activeSpecies","name","ElementEditor","submissionMenuOpen","ff","submitting","dataURL","currentSubmission","prevProps","play","context","imgData","createImageData","putImageData","cellData","toDataURL","JSON","stringify","date","Date","getMonth","getDate","pop_undo","refresh","onChange","speed","target","value","type","defaultValue","replace","map","setElement","selected","text","background","ElementButton","closeMenu","display","AppRouter","path","component","exact","ReactDOM","HUD","resize","screen_width","innerWidth","canvasStyle","innerHeight","HUDStyle","hudWidth","nextFrameShouldBe","renderLoop","timeTillNextFrame","timePerFrame","nFramesBehind","abs","requestAnimationFrame","load","ctrlKey","cachedTextDecoder","TextDecoder","module","ignoreBOM","fatal","decode","cachegetUint8Memory0","getStringFromWasm0","ptr","len","wasm","subarray","_assertClass","instance","klass","Error","what","freeze","ptr0","ptr1","ret","__wrap","arg0","obj","create","prototype","v1","v2","v3","v4","v5","v6","v7","v8","v9","Rule","c0","ptr2","c","ri","ci","rule","__wbg_random_a3b3bcffa2ed629c","__wbindgen_throw","arg1","exports","timeout","tutorialProgress","classList","handleActivity","clearTimeout","remove"],"mappings":"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","file":"2.ad7b589f61ae03a30210.js","sourcesContent":["const reglBuilder = require(\"regl\");\nconst GIF = require(\"gif.js\");\n// const GIF = require(\"gl-gif\");\nimport { memory } from \"../crate/pkg/sandtable_bg\";\nwindow.memory = memory;\nimport { Species } from \"../crate/pkg/sandtable\";\nimport { Universe } from \"../crate/pkg\";\nimport { finished } from \"stream\";\n\nlet fsh = require(\"./glsl/sand.glsl\");\nlet vsh = require(\"./glsl/sandVertex.glsl\");\n\nlet startWebGL = ({ canvas, universe, isSnapshot = false, gl }) => {\n  let regl;\n  if (gl) {\n    regl = reglBuilder({\n      gl,\n      attributes: { preserveDrawingBuffer: isSnapshot },\n    });\n  } else {\n    regl = reglBuilder({\n      canvas,\n      attributes: { preserveDrawingBuffer: isSnapshot },\n    });\n  }\n  const lastFrame = regl.texture();\n  const width = universe.width();\n  const height = universe.height();\n  let cell_pointer = universe.cells();\n  let cells = new Uint8Array(memory.buffer, cell_pointer, width * height * 4);\n\n  const dataTexture = regl.texture({ width, height, data: cells });\n\n  let drawSand = regl({\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: \"src alpha\",\n        srcAlpha: 1,\n        dstRGB: \"one minus src alpha\",\n        dstAlpha: 1,\n      },\n      equation: {\n        rgb: \"add\",\n        alpha: \"add\",\n      },\n      color: [0, 0, 0, 0],\n    },\n    frag: fsh,\n    uniforms: {\n      t: ({ tick }) => tick,\n      dataTexture: () => {\n        cell_pointer = universe.cells();\n        cells = new Uint8Array(memory.buffer, cell_pointer, width * height * 4);\n        return dataTexture({ width, height, data: cells });\n      },\n\n      resolution: ({ viewportWidth, viewportHeight }) => [\n        viewportWidth,\n        viewportHeight,\n      ],\n      dpi: (window.ratio || 4) / 4,\n      isSnapshot,\n      backBuffer: lastFrame,\n    },\n\n    vert: vsh,\n    attributes: {\n      // Full screen triangle\n      position: [\n        [-1, 4],\n        [-1, -1],\n        [4, -1],\n      ],\n    },\n    // Our triangle has 3 vertices\n    count: 3,\n  });\n\n  return {\n    regl,\n    draw: () => {\n      regl.poll();\n      drawSand();\n      // lastFrame({\n      //   copy: true\n      // });\n    },\n  };\n};\n\nlet snapshot = (universe) => {\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = universe.width() / 2;\n  canvas.height = universe.height() / 2;\n  let render = startWebGL({ universe, canvas, isSnapshot: true });\n  render();\n\n  return canvas.toDataURL(\"image/png\");\n};\n\nlet exportGif = (universe, cb) => {\n  window.paused = true;\n\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = universe.width() * 2;\n  canvas.height = universe.height() * 2;\n  let w = canvas.width;\n  let h = canvas.height;\n  // let gl = canvas.getContext(\"webgl\");\n\n  var gif = new GIF({\n    workers: 2,\n    quality: 10,\n    width: canvas.width,\n    height: canvas.height,\n    transparent: \"rgba(0,0,0,0)\",\n  });\n  let frames = [];\n\n  const tmpc = document.createElement(\"canvas\");\n  tmpc.width = w;\n  tmpc.height = h;\n  const tctx = tmpc.getContext(\"2d\");\n\n  frames = [];\n  let frameSize = { width: canvas.width, height: canvas.height };\n\n  const numFrames = 20;\n  let t = window.t;\n  for (var i = 0; i < numFrames; i++) {\n    universe.set_time((t / 50) % 255);\n    t += 5;\n    universe.tick();\n    canvas = document.createElement(\"canvas\");\n    canvas.width = universe.width() * 2;\n    canvas.height = universe.height() * 2;\n    let w = canvas.width;\n    let h = canvas.height;\n    let { regl, draw } = startWebGL({ universe, canvas, isSnapshot: false });\n\n    draw();\n    console.log(\"adding frame \" + i);\n    // gif.addFrame(gl, { copy: false });\n\n    // this is faster but the y-axis gets flipped\n    // let data = new ImageData(w, h);\n    // let pixels = new Uint8Array(data.data.buffer);\n    // regl.read(pixels);\n\n    // gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, pixels)\n\n    // var bytes = new Uint8Array(100)\n    // regl.read(bytes)\n\n    tctx.clearRect(0, 0, w, h);\n\n    tctx.drawImage(canvas, 0, 0);\n    const data = tctx.getImageData(0, 0, w, h);\n    frames.push(data);\n\n    // // don't lock up the ui\n    // if (i % 4 == 0) {\n    //     await nextTick()\n    // }\n  }\n  // console.log(frames);\n  //boomerang\n  frames = [...frames, ...frames.slice(0).reverse()];\n  for (const frame of frames) {\n    gif.addFrame(frame, { delay: 16 });\n  }\n\n  gif.on(\"finished\", function (blob) {\n    // window.open(URL.createObjectURL(blob));\n    cb(URL.createObjectURL(blob));\n  });\n  gif.render();\n  // const renderFrame = (n = 0) => {\n  //   console.log(n);\n\n  //   if (n == 20) {\n  //     console.log(\"finished!\");\n  //     gif.on(\"finished\", function(blob) {\n  //       window.open(URL.createObjectURL(blob));\n  //     });\n  //     gif.render();\n  //   } else {\n\n  //     renderFrame(n + 1);\n  //   }\n  // };\n  // renderFrame();\n  window.paused = false;\n};\n\nlet pallette = () => {\n  let canvas = document.createElement(\"canvas\");\n\n  let species = Object.values(Species).filter((k) => !isNaN(parseFloat(k)));\n  let range = Math.max(...species) + 1;\n  let universe = Universe.new(range, 1);\n  canvas.width = range;\n  canvas.height = 3;\n  universe.reset();\n\n  species.forEach((id) => universe.paint(id, 0, 1, id));\n  universe.paint(Species.Empty, 0, 1, Species.Empty);\n  let render = startWebGL({ universe, canvas, isSnapshot: true }).draw;\n  render();\n  let ctx = canvas.getContext(\"webgl\");\n  let data = new Uint8Array(range * 4);\n  ctx.readPixels(0, 0, range, 1, ctx.RGBA, ctx.UNSIGNED_BYTE, data);\n  let colors = {};\n  species.forEach((id) => {\n    let index = id * 4;\n    let color = `rgba(${data[index]},${data[index + 1]}, ${\n      data[index + 2]\n    }, 0.9)`;\n    colors[id] = color;\n  });\n  // colors[0] = `rgba(100, 100, 100, 0.9)`;\n  return colors;\n};\n\nexport { startWebGL, snapshot, pallette, exportGif };\n","const fps = new (class {\n  constructor() {\n    this.fps = document.getElementById(\"fps\");\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Convert the delta time since the last frame render into a measure\n    // of frames per second.\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now;\n    const fps = (1 / delta) * 1000;\n\n    // Save only the latest 100 timings.\n    this.frames.push(fps);\n    if (this.frames.length > 30) {\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of our 100 latest timings.\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n    for (let i = 0; i < this.frames.length; i++) {\n      sum += this.frames[i];\n      min = Math.min(this.frames[i], min);\n      max = Math.max(this.frames[i], max);\n    }\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `FPS:${Math.round(mean)\n      .toString()\n      .padStart(3)}`;\n  }\n})();\n\nexport { fps };\n","import { height, universe, width, ratio } from \"./index.js\";\n\nimport { Species } from \"../crate/pkg\";\n\nconst canvas = document.getElementById(\"sand-canvas\");\nlet lastPlacedFish = 0;\nfunction canPlaceFish() {\n  let diff = Date.now() - lastPlacedFish;\n  if (diff > 1000) {\n    lastPlacedFish = Date.now();\n    return true;\n  } else {\n    return false;\n  }\n}\nconst eventDistance = (a, b) => {\n  return Math.sqrt(\n    Math.pow(a.clientX - b.clientX, 2) + Math.pow(a.clientY - b.clientY, 2),\n    2\n  );\n};\n\nconst magnitude = (a) => {\n  return Math.sqrt(Math.pow(a.clientX, 2) + Math.pow(a.clientY, 2), 2);\n};\n\nconst norm = (a) => {\n  let mag = magnitude(a);\n  return { clientX: a.clientX / mag, clientY: a.clientY / mag };\n};\nconst scale = (a, s) => {\n  return { clientX: a.clientX * s, clientY: a.clientY * s };\n};\nconst add = (a, b) => {\n  return { clientX: a.clientX + b.clientX, clientY: a.clientY + b.clientY };\n};\nconst sub = (a, b) => {\n  return { clientX: a.clientX - b.clientX, clientY: a.clientY - b.clientY };\n};\n\nlet painting = false;\nlet lastPaint = null;\nlet repeat = null;\n\ncanvas.addEventListener(\"mousedown\", (event) => {\n  event.preventDefault();\n\n  universe.push_undo();\n\n  painting = true;\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  paint(event);\n  lastPaint = event;\n});\n\ndocument.body.addEventListener(\"mouseup\", (event) => {\n  clearInterval(repeat);\n  if (painting) {\n    event.preventDefault();\n    lastPaint = null;\n    painting = false;\n  }\n});\n\ncanvas.addEventListener(\"mousemove\", (event) => {\n  clearInterval(repeat);\n  smoothPaint(event);\n});\n\ncanvas.addEventListener(\"mouseleave\", (event) => {\n  clearInterval(repeat);\n  lastPaint = null;\n});\n\ncanvas.addEventListener(\"touchstart\", (event) => {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n  let touches = Array.from(event.touches);\n\n  universe.push_undo();\n\n  painting = true;\n  lastPaint = event;\n  handleTouches(event);\n});\n\ncanvas.addEventListener(\"touchend\", (event) => {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n  lastPaint = null;\n  painting = false;\n  clearInterval(repeat);\n});\n\ncanvas.addEventListener(\"touchmove\", (event) => {\n  if (!window.paused) {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n  }\n  clearInterval(repeat);\n  handleTouches(event);\n});\n\nfunction smoothPaint(event) {\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  let startEvent = { clientX: event.clientX, clientY: event.clientY };\n  if (!painting) {\n    return;\n  }\n  let size = 1;\n\n  let i = 0;\n  paint(startEvent);\n  if (lastPaint) {\n    while (eventDistance(startEvent, lastPaint) > size / 3) {\n      let d = eventDistance(startEvent, lastPaint);\n      startEvent = add(\n        startEvent,\n        scale(norm(sub(lastPaint, event)), Math.min(size / 3, d))\n      );\n      i++;\n      if (i > 1000) {\n        break;\n      }\n      paint(startEvent);\n    }\n  }\n  lastPaint = event;\n}\n\nconst handleTouches = (event) => {\n  let touches = Array.from(event.touches);\n  if (touches.length == 1) {\n    smoothPaint(touches[0]);\n  } else {\n    touches.forEach(paint);\n  }\n};\n\nfunction convertEventCoordinates(event) {\n  let bw = 28;\n  let boundingRect = canvas.getBoundingClientRect();\n\n  boundingRect = {\n    left: boundingRect.left + bw,\n    top: boundingRect.top + bw,\n    width: boundingRect.width - bw * 2,\n    height: boundingRect.height - bw * 2,\n  };\n  const scaleX =\n    canvas.width /\n    (ratio * Math.ceil(window.devicePixelRatio)) /\n    boundingRect.width;\n  const scaleY =\n    canvas.height /\n    (ratio * Math.ceil(window.devicePixelRatio)) /\n    boundingRect.height;\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n  const x = Math.min(Math.floor(canvasLeft), width - 1);\n  const y = Math.min(Math.floor(canvasTop), height - 1);\n  return [x, y];\n}\nconst paint = (event) => {\n  if (!painting) {\n    return;\n  }\n\n  const [x, y] = convertEventCoordinates(event);\n  if (window.UI.state.selectedElement < 0) return;\n\n  let size = 1;\n  universe.paint(x, y, size, window.UI.state.selectedElement);\n};\n","import { Species } from \"../crate/pkg\";\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nasync function boot(width, height) {\n  for (let r = 0; r <= width * 1.7; r += 72) {\n    for (let s = 6; s >= 1; s -= 1) {\n      let rr = r - s * 12;\n      universe.paint(width / 2, height / 2, rr + 5, Species.Empty);\n      universe.paint(width / 2, height / 2, rr, s);\n      await sleep(16);\n    }\n  }\n\n  for (let r = 0; r <= width - 2; r += 16) {\n    universe.paint(width / 2, height / 2, r - 5, Species.Empty);\n    await sleep(8);\n  }\n\n  for (let a = 0; a <= 180; a += 7) {\n    let x = (width / 2 + 10) * Math.cos(a * (Math.PI / 180));\n    let y = (height / 2 + 10) * Math.sin(a * (Math.PI / 180));\n    universe.paint(width / 2 + x, height / 2 + y, 21, Species.Empty);\n    universe.paint(width / 2 - x, height / 2 - y, 21, Species.Empty);\n    await sleep(8);\n  }\n}\nfunction drawBowl() {\n  universe.paint(h, h, d + 2, Species.Rule1);\n  universe.paint(h, h, d - 2, Species.Empty);\n}\n\nexport { sleep, boot };\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nconst Info = () => {\n  return (\n    <div className=\"welcome-scrim\">\n      <div className=\"Info window\">\n        <div className=\"title-bar\">\n          <div className=\"title-bar-text\">Information</div>\n          <div className=\"title-bar-controls\">\n            <Link to=\"/\">\n              <button aria-label=\"Minimize\"></button>\n            </Link>\n            <button aria-label=\"Maximize\"></button>\n            <Link to=\"/\">\n              <button aria-label=\"Close\"> </button>\n            </Link>\n          </div>\n        </div>\n        <div className=\"window-body \">\n          {/* <li>A sealed ecosystem simulation </li> */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Info;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Menu = ({ close, children }) => {\n  return (\n    <div className=\"welcome-scrim\">\n      <div id={\"welcome\"}>\n        {children}\n        <Link to=\"/\" className=\"x\" onClick={close}>\n          <button> x</button>\n        </Link>\n      </div>\n    </div>\n  );\n};\nexport default Menu;\n","import React from \"react\";\nimport { Species, SymmetryMode } from \"../../crate/pkg\";\nimport classNames from \"classnames\";\n\n// function keys(en) {\n//   return Object.keys(en)\n//     .filter(k => isNaN(parseFloat(k)))\n//     .map(k => {\n//       return { key: k, value: en[k] };\n//     });\n//   // .filter()\n// }\nlet ruleSymbols = {\n  [Species.Empty]: \"🜂\",\n  [Species.Rule1]: \"🝊\",\n  [Species.Rule2]: \"☉\",\n  [Species.Rule3]: \"☽\",\n  [Species.Rule4]: \"🜛\",\n  [Species.Rule5]: \"🜝\",\n  [Species.Rule6]: \"🜏\",\n};\n\nlet SymmetryOptions = [\n  // {\n  //   key: SymmetryMode.None,\n  //   symbol: \"ⵔ\",\n  // },\n  {\n    key: SymmetryMode.Horizontal,\n    symbol: \"🜕\",\n  },\n  // {\n  //   key: SymmetryMode.Vertical,\n  //   symbol: \"🜔\",\n  // },\n  {\n    key: SymmetryMode.Quad,\n    symbol: \"🜨\",\n  },\n];\nlet SlotOptions = [\n  {\n    key: Species.Empty,\n    symbol: ruleSymbols[Species.Empty],\n  },\n  {\n    key: Species.Wild,\n    symbol: \"*\",\n  },\n  {\n    key: Species.Rule1,\n    symbol: ruleSymbols[Species.Rule1],\n  },\n  {\n    key: Species.Rule2,\n    symbol: ruleSymbols[Species.Rule2],\n  },\n  {\n    key: Species.Rule3,\n    symbol: ruleSymbols[Species.Rule3],\n  },\n  {\n    key: Species.Rule4,\n    symbol: ruleSymbols[Species.Rule4],\n  },\n  {\n    key: Species.Rule5,\n    symbol: ruleSymbols[Species.Rule5],\n  },\n  {\n    key: Species.Rule6,\n    symbol: ruleSymbols[Species.Rule6],\n  },\n];\n\nfunction grid_index(x, y) {\n  return y * 3 + x;\n}\nclass Matrix extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  gridSquare(x, y, isSelector, isCenter) {\n    let { grid, options, selectedElement } = this.props;\n    let inactive = isSelector && isCenter;\n    let myCell = grid[grid_index(x, y)];\n    if (inactive) {\n      myCell = selectedElement;\n    }\n    let { symbol } = options.find((m) => m.key == myCell);\n    let incSlot = (i) => {\n      if (inactive) return;\n\n      let { grid, options } = this.props;\n      let slotIndex = options.findIndex((e) => e.key == myCell);\n      slotIndex = (slotIndex + options.length + i) % options.length;\n      if (\n        isCenter &&\n        slotIndex == options.findIndex((e) => e.key === Species.Wild)\n      ) {\n        slotIndex = (slotIndex + options.length + i) % options.length;\n      }\n      let next = options[slotIndex];\n\n      grid[grid_index(x, y)] = next.key;\n      // (myCell + 1) % options.length;\n      let { setGrid } = this.props;\n      setGrid(grid);\n    };\n    let size = isCenter ? 50 : 50;\n    let inset = isCenter ? 2 : 2;\n    let isWild = symbol === \"*\";\n    return (\n      <div\n        key={`${x}-${y}`}\n        transform={`translate(${x * 51},${y * 51})`}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          incSlot(-1, inactive);\n        }}\n        onClick={() => incSlot(1)}\n        onDrop={(e) => {\n          if (inactive) return;\n\n          var element = e.dataTransfer.getData(\"text\");\n          let elementID = parseInt(element, 10);\n          if (!SlotOptions.find((m) => m.key == elementID)) {\n            return;\n          }\n\n          grid[grid_index(x, y)] = elementID;\n          let { setGrid } = this.props;\n          setGrid(grid);\n        }}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        <button\n          className=\"mat-box\"\n          draggable=\"true\"\n          style={{\n            width: size - inset,\n            height: size - inset,\n            filter: \"saturate(0.8)\",\n            color: isWild ? \"#666\" : \"black\",\n            backgroundColor: isWild ? \"#dddddd00\" : window.pallette[myCell],\n            borderColor: isWild ? \"#aaaaaaee\" : window.pallette[myCell],\n            backgroundImage: 'url(\"assets/paper.png\")',\n            backgroundSize: \"100px 100px\",\n            borderWidth: 3,\n            fontSize: \"30px\",\n            borderStyle: \" outset\",\n            lineHeight: 0,\n            verticalAlign: \"middle\",\n          }}\n          onDragStart={(e) => {\n            e.dataTransfer.setData(\"text/plain\", myCell);\n          }}\n        >\n          {inactive || symbol == \"?\" ? ruleSymbols[selectedElement] : symbol}\n        </button>\n      </div>\n    );\n  }\n  render() {\n    // let { data } = this.state;\n    let { isSelector, isDisabled } = this.props;\n    return (\n      <div\n        className={classNames(\n          { disabled: this.props.isDisabled },\n          \"matrix-grid\"\n        )}\n      >\n        {[\n          this.gridSquare(0, 0, isSelector),\n          this.gridSquare(0, 1, isSelector),\n          this.gridSquare(0, 2, isSelector),\n\n          this.gridSquare(1, 0, isSelector),\n          this.gridSquare(1, 1, isSelector, true),\n          this.gridSquare(1, 2, isSelector),\n\n          this.gridSquare(2, 0, isSelector),\n          this.gridSquare(2, 1, isSelector),\n          this.gridSquare(2, 2, isSelector),\n        ]}\n      </div>\n    );\n  }\n}\n\nexport { Matrix, ruleSymbols, SymmetryOptions, SlotOptions, grid_index };\n","import React from \"react\";\n// import classNames from \"classnames\";\nimport { Clause, Selector, Effector } from \"../../crate/pkg\";\nimport { Matrix, SymmetryOptions, SlotOptions } from \"./matrix\";\nlet probabilityMap = [\n  { p: 0, symbol: \"\\xa0×\\xa0\" },\n  { p: 1, symbol: \"\\xa0\\xa0\\xa0\" },\n  // { p: 2, symbol: \"⚁\" },\n  // { p: 3, symbol: \"⚂\" },\n  // { p: 4, symbol: \"⚃\" },\n  // { p: 5, symbol: \"⚄\" },\n  // { p: 6, symbol: \"⚅\" },\n];\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedElement: props.selectedElement,\n      clause_index: props.clause_index,\n      clause: Editor.getRule(props.selectedElement, props.clause_index),\n      heat: 0,\n    };\n    window.Editor = this;\n    console.log(\"startingInterval\");\n    window.poll = window.setInterval(() => this.pollHeat(), 200);\n  }\n  pollHeat() {\n    let { selectedElement, clause_index } = this.props;\n    // console.log(`polling ${selectedElement} ${clause_index}`);\n\n    let total =\n      universe.heatmap(selectedElement * 3) +\n      universe.heatmap(selectedElement * 3 + 1) +\n      universe.heatmap(selectedElement * 3 + 2);\n\n    let heat = total\n      ? universe.heatmap(selectedElement * 3 + clause_index) / total\n      : 0;\n    if (heat > 0) {\n      heat += 0.2;\n    }\n    heat = Math.floor(heat * 25) / 25;\n    this.setState({ heat });\n  }\n  static getRule(selectedElement, clause_index) {\n    try {\n      let clause = window.u.clause(selectedElement, clause_index);\n      const selector = Array.from(\n        new Uint8Array(memory.buffer, clause.selector.grid(), 9)\n      ).slice(0);\n      const effector = Array.from(\n        new Uint8Array(memory.buffer, clause.effector.grid(), 9)\n      ).slice(0);\n\n      const symmetry = clause.symmetry();\n      const probability = clause.probability();\n      return {\n        selector,\n        effector,\n        symmetry,\n        probability: probabilityMap.find((v) => v.p == probability),\n      };\n    } catch (e) {\n      console.error(e);\n      throw e;\n    }\n  }\n  static getDerivedStateFromProps(props, state) {\n    let { selectedElement, clause_index } = props;\n    if (selectedElement != state.selectedElement && selectedElement <= 6) {\n      try {\n        let clause = Editor.getRule(selectedElement, clause_index);\n        return {\n          selectedElement,\n          clause,\n        };\n      } catch (e) {\n        return {\n          selectedElement,\n          clause: state.clause,\n        };\n      }\n    }\n\n    return null;\n  }\n  setRule() {\n    let { clause } = this.state;\n    let {\n      selector: j_selector,\n      effector: j_effector,\n      symmetry: j_symmetry,\n      probability,\n    } = clause;\n\n    let selector = new Selector(...j_selector);\n    let effector = new Effector(...j_effector);\n    let r_clause = new Clause(\n      probability.p,\n      SymmetryOptions[j_symmetry].key,\n      selector,\n      effector\n    );\n    window.u.push_undo();\n\n    window.u.set_clause(\n      r_clause,\n      this.props.selectedElement,\n      this.props.clause_index\n    );\n  }\n\n  incSymmetry(i) {\n    let { clause } = this.state;\n    let { symmetry } = clause;\n\n    clause.symmetry =\n      (SymmetryOptions.length + symmetry + i) % SymmetryOptions.length;\n\n    this.setState(\n      {\n        clause,\n      },\n      this.setRule\n    );\n  }\n\n  incProbability(i) {\n    let { clause } = this.state;\n    let { probability } = clause;\n\n    let pIndex = probabilityMap.indexOf(probability);\n    pIndex = (probabilityMap.length + pIndex + i) % probabilityMap.length;\n    console.log(probabilityMap[pIndex]);\n    clause.probability = probabilityMap[pIndex];\n\n    this.setState(\n      {\n        clause,\n      },\n      this.setRule\n    );\n  }\n\n  render() {\n    let { selectedElement, clause_index } = this.props;\n    let { clause, heat } = this.state;\n    // console.log(clause);\n    let { selector, effector, symmetry, probability } = clause;\n    return (\n      <div className=\"MatrixMenu\">\n        <div className=\"TileGrid\">\n          <div\n            className=\"center\"\n            style={{\n              fontSize: \"30px\",\n              opacity: probability.p == 0 ? 0.2 : 1.0,\n              gridColumn: 2,\n              gridRow: 1,\n            }}\n            onContextMenu={(e) => {\n              e.preventDefault();\n              this.incSymmetry(-1);\n            }}\n            onClick={() => this.incSymmetry(1)}\n          >\n            {SymmetryOptions[symmetry].symbol}\n          </div>\n          <img\n            // className=\"center\"\n            src=\"assets/gold_arrow.png\"\n            height=\"23px\"\n            width=\"23px\"\n            style={{\n              opacity: probability.p == \"×\" ? \"0.7\" : \"1.0\",\n              gridColumn: 2,\n              gridRow: 2,\n              margin: \"auto\",\n              filter: `drop-shadow(0px 0px ${heat * 10}px gold)`,\n            }}\n            onContextMenu={(e) => {\n              e.preventDefault();\n              this.incProbability(-1);\n            }}\n            onClick={() => this.incProbability(1)}\n          />\n          <div\n            className=\"center\"\n            style={{\n              fontSize: \"45px\",\n              color: \"#d03f41\",\n              gridColumn: 2,\n              gridRow: 2,\n              overflow: \"hidden\",\n              willChange: \"opacity\",\n            }}\n            onContextMenu={(e) => {\n              e.preventDefault();\n              this.incProbability(-1);\n            }}\n            onClick={() => this.incProbability(1)}\n          >\n            {probability.symbol}\n          </div>\n\n          {selector && (\n            <Matrix\n              selectedElement={selectedElement}\n              options={SlotOptions}\n              grid={selector}\n              isSelector\n              isDisabled={probability.p == 0}\n              setGrid={(newGrid) => {\n                let { clause } = this.state;\n                clause.selector = newGrid;\n                this.setState({ clause }, this.setRule);\n              }}\n            />\n          )}\n\n          {effector && (\n            <Matrix\n              selectedElement={selectedElement}\n              options={SlotOptions}\n              grid={effector}\n              isDisabled={probability.p == 0}\n              setGrid={(newGrid) => {\n                let { clause } = this.state;\n                clause.effector = newGrid;\n                this.setState({ clause }, this.setRule);\n              }}\n            />\n          )}\n          {/* </g> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { Editor, probabilityMap };\n","import {\n  Clause,\n  Selector,\n  Effector,\n  SymmetryMode,\n  Species,\n} from \"../../crate/pkg\";\nimport { memory } from \"../../crate/pkg/sandtable_bg\";\n\nimport { SymmetryOptions } from \"./matrix\";\nimport { probabilityMap } from \"./editor\";\nimport { grid_index } from \"./matrix\";\n\nfunction resetClause(element, clause_index) {\n  let selector = new Selector(\n    Species.Wild,\n    Species.Wild,\n    Species.Wild,\n\n    Species.Wild,\n    element,\n    Species.Wild,\n\n    Species.Wild,\n    Species.Wild,\n    Species.Wild\n  );\n  let effector = new Effector(\n    Species.Wild,\n    Species.Wild,\n    Species.Wild,\n\n    Species.Wild,\n    element,\n    Species.Wild,\n\n    Species.Wild,\n    Species.Wild,\n    Species.Wild\n  );\n  let r_clause = new Clause(\n    probabilityMap[1].p,\n    SymmetryOptions[0].key,\n    selector,\n    effector\n  );\n  universe.set_clause(r_clause, element, clause_index);\n}\n\nfunction swapClauses(element, c1, c2) {\n  let clause = window.u.clause(element, c1);\n\n  const selector = Array.from(\n    new Uint8Array(memory.buffer, clause.selector.grid(), 9)\n  ).slice(0);\n  const effector = Array.from(\n    new Uint8Array(memory.buffer, clause.effector.grid(), 9)\n  ).slice(0);\n  let symmetry = clause.symmetry();\n  let probability = clause.probability();\n\n  let new_s = new Selector(...selector);\n  let new_e = new Effector(...effector);\n  let r_clause = new Clause(probability, symmetry, new_s, new_e);\n\n  let clause2 = window.u.clause(element, c2);\n\n  window.u.set_clause(clause2, element, c1);\n\n  window.u.set_clause(r_clause, element, c2);\n  window.u.push_undo();\n}\n\nfunction mutate(element, clause_index) {\n  let clause = window.u.clause(element, clause_index);\n\n  let cell_pointer = universe.cells();\n  let cells = new Uint8Array(\n    memory.buffer,\n    cell_pointer,\n    window.u.width() * window.u.height() * 4\n  );\n\n  let elementHist = {};\n  for (let i = 0; i < cells.length; i += 4) {\n    elementHist[cells[i]] = (elementHist[cells[i]] || 5) + 0.01;\n    if (Math.random() > 0.2) {\n      i += 4;\n    }\n  }\n  let values = [1, 2, 3, 4, 5, 6];\n  let elementsPresent = Object.keys(elementHist);\n  elementsPresent.forEach((ele) => {\n    let n = elementHist[ele];\n    for (var i = 0; i < n; i++) {\n      values.push(parseInt(ele, 10));\n      values.push(Species.Wild);\n    }\n  });\n\n  let effectorValues = values.slice(0);\n  // console.log(effectorValues.length);\n\n  let m = values.length;\n  for (var i = 0; i < m * (0.4 + clause_index / 3); i++) {\n    values.push(Species.Wild);\n    // values.push(Species.Wild);\n  }\n  // console.log(elementHist);\n  // console.log(values);\n  const selector = Array.from(\n    new Uint8Array(memory.buffer, clause.selector.grid(), 9)\n  ).slice(0);\n  const effector = Array.from(\n    new Uint8Array(memory.buffer, clause.effector.grid(), 9)\n  ).slice(0);\n\n  let symmetry = clause.symmetry();\n  let probability = clause.probability();\n\n  selector.forEach((v) => {\n    effectorValues.push(v);\n    effectorValues.push(v);\n    effectorValues.push(v);\n    effectorValues.push(v);\n    effectorValues.push(v);\n    effectorValues.push(v);\n    effectorValues.push(v);\n    effectorValues.push(v);\n    effectorValues.push(v);\n    effectorValues.push(v);\n    effectorValues.push(v);\n    effectorValues.push(v);\n  });\n  let x = Math.floor(Math.random() * 3);\n  let y = Math.floor(Math.random() * 3);\n  while (x == 1 && y == 1) {\n    x = Math.floor(Math.random() * 3);\n    y = Math.floor(Math.random() * 3);\n  }\n\n  selector[grid_index(x, y)] =\n    values[Math.floor(Math.random() * values.length)];\n\n  x = Math.floor(Math.random() * 3);\n  y = Math.floor(Math.random() * 3);\n\n  if (selector[grid_index(x, y)] === Species.Wild) {\n    x = Math.floor(Math.random() * 3);\n    y = Math.floor(Math.random() * 3);\n  }\n  if (selector[grid_index(x, y)] === Species.Wild) {\n    x = Math.floor(Math.random() * 3);\n    y = Math.floor(Math.random() * 3);\n  }\n  // values = [values, ..]\n  effector[grid_index(x, y)] =\n    effectorValues[Math.floor(Math.random() * effectorValues.length)];\n\n  effector.forEach((v, i) => {\n    if (i == 4) {\n      if (effector[i] == Species.Wild || Math.random() < 0.05) {\n        effector[i] = element;\n      }\n      return;\n    }\n    if (selector[i] === Species.Wild) {\n      effector[i] = Species.Wild;\n    } else {\n      // if (effector[i] === Species.Wild) {\n      // effector[i] = selector[i];\n      // }\n    }\n  });\n  if (Math.random() > 0.9) {\n    symmetry =\n      symmetry == SymmetryMode.Quad\n        ? SymmetryMode.Horizontal\n        : SymmetryMode.Quad;\n  }\n  if (Math.random() > 0.2 + probability * 0.7) {\n    probability = probability == 1 ? 0 : 1;\n  }\n  let new_s = new Selector(...selector);\n  let new_e = new Effector(...effector);\n  // console.log(probability, symmetry);\n  let r_clause = new Clause(probability, symmetry, new_s, new_e);\n\n  window.u.set_clause(r_clause, element, clause_index);\n}\n\nexport { resetClause, mutate, swapClauses };\n","import React from \"react\";\n\nimport { memory } from \"../../crate/pkg/sandtable_bg\";\nimport { Species } from \"../../crate/pkg/sandtable\";\n\nimport { height, universe, width, reset } from \"../index.js\";\nimport { exportGif, pallette } from \"../render.js\";\nimport Menu from \"./menu.js\";\nimport { Editor } from \"./editor\";\nimport { resetClause, mutate, swapClauses } from \"./rules\";\nimport { ruleSymbols } from \"./matrix\";\n\nwindow.species = Species;\nlet pallette_data = pallette();\nwindow.pallette = pallette_data;\nlet activeSpecies = Object.keys(Species).filter(\n  (name) => name.length > 2 && name != \"Wild\"\n);\n\nconst ElementButton = (name, selectedElement, setElement) => {\n  let elementID = Species[name];\n\n  let color = pallette_data[elementID];\n\n  let selected = elementID == selectedElement;\n\n  let background = \"inherit\";\n\n  let text = name;\n  if (ruleSymbols[elementID]) {\n    text = ruleSymbols[elementID];\n  }\n\n  return (\n    <button\n      className={selected ? `selected ${name}` : name}\n      key={name}\n      draggable\n      onClick={() => {\n        setElement(elementID);\n      }}\n      onDragStart={(e) => {\n        // e.currentTarget.style.boxShadow = \"none\";\n        e.dataTransfer.setData(\"text/plain\", elementID);\n      }}\n      onDrop={(e) => {\n        //this is for tiny accidentaly drags\n        let element = e.dataTransfer.getData(\"text\");\n        let id = parseInt(element, 10);\n        if (id == elementID) {\n          setElement(elementID);\n        }\n      }}\n      onDragOver={(e) => e.preventDefault()}\n      style={{\n        background,\n        backgroundColor: color,\n        borderColor: color,\n        filter: selected || `saturate(0.8) `,\n        // lineHeight: 0\n      }}\n    >\n      {\"  \"}\n      {text}\n      {\"  \"}\n    </button>\n  );\n};\n\nclass ElementEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      submissionMenuOpen: false,\n      paused: false,\n      ff: false,\n      submitting: false,\n      size: 1,\n      dataURL: null,\n      currentSubmission: null,\n      selectedElement: Species.Rule2,\n    };\n    window.UI = this;\n  }\n\n  componentDidUpdate(prevProps) {}\n  togglePause() {\n    window.paused = !this.state.paused;\n    this.setState({ paused: !this.state.paused });\n  }\n  toggleFF() {\n    window.ff = !this.state.ff;\n    this.setState({ ff: !this.state.ff });\n  }\n  play() {\n    window.paused = false;\n    this.setState({ paused: false });\n  }\n  pause() {\n    window.paused = true;\n    this.setState({ paused: true });\n  }\n\n  setSize(event, size) {\n    event.preventDefault();\n    this.setState({\n      size,\n    });\n  }\n  reset() {\n    // if (window.confirm(\"Reset your ecosystem?\")) {\n    this.play();\n\n    reset();\n  }\n\n  closeMenu() {\n    this.play();\n    this.setState({ dataURL: null });\n  }\n  upload() {\n    console.log(\"saving\");\n    // let dataURL = snapshot(universe);\n    const cells = new Uint8Array(\n      memory.buffer,\n      universe.cells(),\n      width * height * 4\n    );\n\n    // Create canvas\n    let canvas = document.createElement(\"canvas\"),\n      context = canvas.getContext(\"2d\"),\n      imgData = context.createImageData(width, height);\n\n    canvas.height = height;\n    canvas.width = width;\n\n    // fill imgData with data from cells\n    for (var i = 0; i < width * height * 4; i++) {\n      if (i % 4 == 3) {\n        imgData.data[i] = 255;\n      } else {\n        imgData.data[i] = cells[i];\n      }\n    }\n    // put data to context at (0, 0)\n    context.putImageData(imgData, 0, 0);\n\n    let cellData = canvas.toDataURL(\"image/png\");\n    let dataString = JSON.stringify(cellData);\n    try {\n      // localStorage.setItem(\"cell_data\", dataString);\n      // localStorage.setItem(\"time\", window.t);\n    } catch {\n      console.log(\"store failed\");\n    }\n\n    try {\n    } catch {\n      console.log(\"store failed\");\n    }\n  }\n  currentDateString() {\n    let date = new Date();\n    return `${date.getMonth()}-${date.getDate()}`;\n  }\n\n  load() {\n    console.log(\"loading\");\n    return;\n    var cellData = JSON.parse(localStorage.getItem(\"cell_data\"));\n\n    if (!cellData) {\n      console.log(\"no save\");\n      window.setInterval(() => this.upload(), 1000 * 10);\n\n      return;\n    }\n\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext(\"2d\");\n    var img = new Image();\n    img.src = cellData;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n      var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n      const cellsData = new Uint8Array(\n        memory.buffer,\n        universe.cells(),\n        width * height * 4\n      );\n\n      // universe.reset();\n\n      for (var i = 0; i < width * height * 4; i++) {\n        cellsData[i] = imgData.data[i];\n      }\n\n      window.setInterval(() => this.upload(), 1000 * 10);\n    };\n\n    // universe.flush_undos();\n    // universe.push_undo();\n    // this.pause();\n  }\n  refresh() {\n    let { selectedElement } = this.state;\n    let s = selectedElement;\n    this.setState(\n      {\n        selectedElement: (selectedElement + 1) % activeSpecies.length,\n      },\n      () => this.setState({ selectedElement: s })\n    );\n  }\n\n  render() {\n    let { ff, selectedElement, currentSubmission, paused } = this.state;\n    let hash =\n      currentSubmission && currentSubmission.id\n        ? `#${currentSubmission.id}`\n        : \"\";\n\n    return (\n      <div className=\"window fade \" id=\"HUD\">\n        <div className=\"title-bar\">\n          {\" \"}\n          <div className=\"title-bar-text\">Alchemi Online</div>\n          <div className=\"title-bar-controls\">\n            {/* <button\n              aria-label=\"Minimize\"\n              onClick={() => {\n                document.body.classList.add(\"faded\");\n              }}\n            ></button>\n            <button aria-label=\"Maximize\"></button> */}\n\n            <button onClick={() => this.reset()}> ⏻</button>\n\n            <button\n              onClick={() => {\n                // reset();\n                universe.pop_undo();\n                // this.refresh();\n                window.UI.refresh();\n              }}\n              // style={{ fontSize: 12, lineHeight: 0 }}\n            >\n              ⤺\n            </button>\n            {/* <button\n              onClick={() => this.togglePause()}\n              className={!paused ? \"selected playbutton\" : \"playbutton\"}\n            >\n              {paused ? (\n                <svg\n                  className=\"bsvg\"\n                  height=\"20\"\n                  width=\"20\"\n                  id=\"d\"\n                  viewBox=\"-50 -50 400 400\"\n                >\n                  <polygon id=\"play\" points=\"0,0 , 300,150 0,300\" />\n                </svg>\n              ) : (\n                <svg\n                  className=\"bsvg\"\n                  height=\"20\"\n                  width=\"20\"\n                  id=\"d\"\n                  viewBox=\"-50 -50 400 400\"\n                >\n                  <polygon id=\"bar2\" points=\"0,0 110,0 110,300 0,300\" />\n                  <polygon id=\"bar1\" points=\"190,0 300,0 300,300 190,300\" />\n                </svg>\n              )}\n            </button> */}\n            <input\n              onChange={(e) =>\n                (window.speed = Math.pow(1.2, e.target.value) - 1)\n              }\n              type=\"range\"\n              style={{ width: 60, margin: 3 }}\n              defaultValue={10}\n              min={0}\n              max={20}\n            ></input>\n          </div>\n        </div>\n        <div className=\"window-body hud-body\">\n          <div\n            id=\"hud-buttons\"\n            style={{\n              backgroundColor: pallette_data[selectedElement].replace(\n                \"0.9\",\n                \"0.2\"\n              ),\n            }}\n          >\n            {/* <OrganicButton\n              onClick={() => this.togglePause()}\n              className={paused ? \"selected\" : \"\"}\n            >\n              {paused ? (\n                <svg\n                  className=\"bsvg\"\n                  height=\"20\"\n                  width=\"20\"\n                  id=\"d\"\n                  viewBox=\"-50 -50 400 400\"\n                >\n                  <polygon id=\"play\" points=\"0,0 , 300,150 0,300\" />\n                </svg>\n              ) : (\n                <svg\n                  className=\"bsvg\"\n                  height=\"20\"\n                  width=\"20\"\n                  id=\"d\"\n                  viewBox=\"-50 -50 400 400\"\n                >\n                  <polygon id=\"bar2\" points=\"0,0 110,0 110,300 0,300\" />\n                  <polygon id=\"bar1\" points=\"190,0 300,0 300,300 190,300\" />\n                </svg>\n              )}\n            </OrganicButton> */}\n            {/* <OrganicButton\n              onClick={() => this.toggleFF()}\n              className={ff ? \"selected\" : \"\"}\n              active={ff}\n            >\n              <svg\n                className=\"bsvg\"\n                height=\"20\"\n                width=\"20\"\n                id=\"d\"\n                viewBox=\"-25 0 350 300\"\n              >\n                <polygon id=\"play\" points=\"0,50 , 150,150 0,250\" />\n                <polygon id=\"play\" points=\"150,50, 300,150 150,250\" />\n              </svg>\n            </OrganicButton> */}\n\n            {/* <OrganicButton onClick={() => this.reset()}>↻</OrganicButton> */}\n            {/* <Link\n              to={{\n                pathname: \"/info/\",\n                hash\n              }}\n            >\n              <OrganicButton style={{ width: \"calc(100% - 4px)\" }}>\n                Info\n              </OrganicButton>\n            </Link> */}\n\n            {/* <OrganicButton\n              onClick={() => {\n                // reset();\n                universe.pop_undo();\n              }}\n              style={{ fontSize: 18, lineHeight: 0 }}\n            >\n              ↜\n            </OrganicButton> */}\n            {/* \n            <OrganicButton\n              onClick={() => {\n                exportGif(universe, blob => {\n                  this.pause();\n\n                  this.setState({ dataURL: blob });\n                });\n              }}\n            >\n              📷\n            </OrganicButton> */}\n\n            {activeSpecies.map((n) =>\n              ElementButton(n, selectedElement, (id) =>\n                this.setState({ selectedElement: id })\n              )\n            )}\n            <hr className=\"chain-hr2\"></hr>\n            <>\n              <Editor\n                selectedElement={selectedElement}\n                clause_index={0}\n              ></Editor>\n              <button\n                className=\"swap\"\n                onClick={() => {\n                  swapClauses(selectedElement, 0, 1);\n                  this.refresh();\n                }}\n              >\n                ↓\n              </button>\n              <Editor\n                selectedElement={selectedElement}\n                clause_index={1}\n              ></Editor>\n              <button\n                className=\"swap\"\n                onClick={() => {\n                  swapClauses(selectedElement, 1, 2);\n                  this.refresh();\n                }}\n              >\n                ↓\n              </button>\n\n              <Editor\n                selectedElement={selectedElement}\n                clause_index={2}\n              ></Editor>\n              <div className=\"hint\">drag and drop tiles to construct rules</div>\n              <button\n                onClick={() => {\n                  window.u.push_undo();\n\n                  mutate(selectedElement, 0);\n                  mutate(selectedElement, 1);\n                  mutate(selectedElement, 2);\n                  this.refresh();\n                }}\n                id=\"clear-button\"\n              >\n                {\" \"}\n                Mutate\n              </button>\n              {/* <button\n                onClick={() => {\n                  let s = selectedElement;\n                  resetClause(selectedElement, 0);\n                  resetClause(selectedElement, 1);\n                  resetClause(selectedElement, 2);\n                  this.setState(\n                    {\n                      selectedElement:\n                        (selectedElement + 1) % activeSpecies.length,\n                    },\n                    () => this.setState({ selectedElement: s })\n                  );\n                }}\n                id=\"clear-button\"\n              >\n                {\" \"}\n                reset\n              </button> */}\n            </>\n            <hr className=\"chain-hr2\"></hr>\n\n            {this.state.dataURL && (\n              <Menu close={() => this.closeMenu()}>\n                <img src={this.state.dataURL} className=\"submissionImg\" />\n                <div style={{ display: \"flex\" }}></div>\n              </Menu>\n            )}\n            {/* <img\n              style={{ width: \"100%\" }}\n              src=\"http://community.fortunecity.ws/tinpan/motorhead/13/images/barb_wire.gif\"\n            ></img> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { ElementEditor, ruleSymbols, activeSpecies };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Info from \"./components/info\";\nimport { ElementEditor } from \"./components/ui\";\nimport Menu from \"./components/menu\";\nimport { reset } from \"./index.js\";\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <Route path=\"/\" component={UI} />\n      <Route exact path=\"/info/\" component={Info} />\n    </Router>\n  );\n}\n\nclass PlaybackControls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paused: false,\n      ff: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {}\n  togglePause() {\n    window.paused = !this.state.paused;\n    this.setState({ paused: !this.state.paused });\n  }\n  // toggleFF() {\n  //   window.ff = !this.state.ff;\n  //   this.setState({ ff: !this.state.ff });\n  // }\n  play() {\n    window.paused = false;\n    this.setState({ paused: false });\n  }\n  pause() {\n    window.paused = true;\n    this.setState({ paused: true });\n  }\n\n  reset() {\n    this.play();\n\n    reset();\n  }\n\n  render() {\n    let { ff, paused } = this.state;\n\n    return (\n      <div id=\"playback\">\n        <button onClick={() => this.reset()}> ⏻</button>\n\n        <button\n          onClick={() => {\n            // reset();\n            universe.pop_undo();\n            // this.refresh();\n            window.UI.refresh();\n          }}\n          style={{ fontSize: 18, lineHeight: 0 }}\n        >\n          ⤺\n        </button>\n        <button\n          onClick={() => this.togglePause()}\n          className={!paused ? \"selected playbutton\" : \"playbutton\"}\n        >\n          {paused ? (\n            <svg\n              className=\"bsvg\"\n              height=\"20\"\n              width=\"20\"\n              id=\"d\"\n              viewBox=\"-50 -50 400 400\"\n            >\n              <polygon id=\"play\" points=\"0,0 , 300,150 0,300\" />\n            </svg>\n          ) : (\n            <svg\n              className=\"bsvg\"\n              height=\"20\"\n              width=\"20\"\n              id=\"d\"\n              viewBox=\"-50 -50 400 400\"\n            >\n              <polygon id=\"bar2\" points=\"0,0 110,0 110,300 0,300\" />\n              <polygon id=\"bar1\" points=\"190,0 300,0 300,300 190,300\" />\n            </svg>\n          )}\n        </button>\n      </div>\n    );\n  }\n}\n\nclass UI extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <>\n        {/* <PlaybackControls></PlaybackControls> */}\n        <ElementEditor></ElementEditor>\n      </>\n    );\n  }\n}\n\nfunction startApp() {\n  ReactDOM.render(<AppRouter />, document.getElementById(\"ui\"));\n}\nexport { startApp };\n","import { Universe } from \"../crate/pkg\";\n\nimport { startWebGL } from \"./render\";\nimport { fps } from \"./fps\";\nimport {} from \"./paint\";\nimport {} from \"./setup\";\nimport { boot } from \"./boot\";\nimport { startApp } from \"./app\";\n\nlet ratio = 4;\nwindow.ratio = ratio;\nlet width = 100;\n// window.innerWidth / ratio;\nlet height = 100;\n// window.innerHeight / ratio;\n//todo scale ratio according to size;\n\nlet n = Math.min(width, height);\nlet h = n / 2;\nlet d = n - 6;\n\nconsole.log(width, height);\nconst universe = Universe.new(width, height);\n\nwindow.u = universe;\nwindow.universe = universe;\n\nstartApp();\nboot(width, height);\n\nconst canvas = document.getElementById(\"sand-canvas\");\n\ncanvas.width = width * ratio * Math.ceil(window.devicePixelRatio);\ncanvas.height = height * ratio * Math.ceil(window.devicePixelRatio);\n\nconst HUD = document.getElementById(\"HUD\");\n// let canvasSize;\nlet resize = () => {\n  let screen_width = window.innerWidth;\n  let HUDheight = 45;\n  let screen_height = window.innerHeight - HUDheight;\n\n  let canvasStyle = \"\";\n  let HUDStyle = \"\";\n  let border = 40 * 2;\n\n  // if (screen_width - 150 > screen_height) {\n  // if (screen_width - window.innerHeight < 400) {\n  // landscape compressed\n\n  let hudWidth = 361;\n\n  canvasStyle = `height: ${Math.min(\n    window.innerHeight - border - HUDheight,\n    // Infinity\n    window.innerWidth - (hudWidth + border + 40)\n  )}px; margin:10px; margin-right: ${hudWidth + 40}px; margin-left:auto;`;\n  // canvasSize = window.innerHeight - border;\n\n  HUDStyle = `width: ${hudWidth}px; margin: 10px;`;\n\n  if (screen_width < 600) {\n    HUDStyle = `margin: 40px 10px; margin-top:${\n      screen_width + 10\n    }px; margin-bottom: ${HUDheight}px ;padding-bottom: 40px`;\n    canvasStyle = `width:${screen_width - border}; height: ${\n      screen_width - border\n    }px; top: 10px; margin:auto; margin-top:10px ; `;\n  }\n\n  HUD.style = HUDStyle;\n  canvas.style = canvasStyle;\n};\n\nresize();\nwindow.addEventListener(\"deviceorientation\", resize, true);\nwindow.addEventListener(\"resize\", resize);\nwindow.addEventListener(\"drop\", (e) => {\n  e.preventDefault();\n});\nlet drawSand = startWebGL({ canvas, universe });\n\nlet t = 0;\nlet nextFrameShouldBe = performance.now();\nconst max_tick_per_frame = 3;\nwindow.speed = 10;\nconst renderLoop = () => {\n  if (!window.paused) {\n    for (var i = 0; i <= max_tick_per_frame; i++) {\n      // let elapsed_time = performance.now() - lastTick;\n      let timeTillNextFrame = performance.now() - nextFrameShouldBe;\n      let timePerFrame = 1000 / window.speed;\n      let nFramesBehind = Math.floor(timeTillNextFrame / timePerFrame);\n      if (Math.abs(nFramesBehind) > 4) {\n        //bankrupt\n        nextFrameShouldBe = performance.now();\n      }\n      if (timeTillNextFrame > 0 && window.speed > 0) {\n        fps.render(); // new\n        universe.tick();\n        nextFrameShouldBe = nextFrameShouldBe + timePerFrame;\n      } else {\n        break;\n      }\n    }\n    // let heatmap = [];\n    // for (var i = 0; i < 3 * 7; i++) {\n    //   heatmap[i] = universe.heatmap(i);\n    // }\n    // console.log(heatmap);\n  }\n\n  // }\n  window.t = t;\n  drawSand.draw();\n  requestAnimationFrame(renderLoop);\n};\n\nfunction reset() {\n  console.log(\"reseting\");\n  // localStorage.setItem(\"cell_data\", null);\n  // universe.reset();\n  boot(width, height);\n}\n\n// window.Editor.setRule();\n\nrenderLoop();\n\nwindow.UI.load();\n\ndocument.addEventListener(\"keydown\", function (event) {\n  if (event.ctrlKey && event.key === \"z\") {\n    universe.pop_undo();\n    window.UI.refresh();\n  }\n});\n\nexport { canvas, width, height, ratio, universe, reset };\n","import * as wasm from './sandtable_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\n/**\n*/\nexport const Species = Object.freeze({ Wild:11,\"11\":\"Wild\",Empty:0,\"0\":\"Empty\",Rule1:1,\"1\":\"Rule1\",Rule2:2,\"2\":\"Rule2\",Rule3:3,\"3\":\"Rule3\",Rule4:4,\"4\":\"Rule4\",Rule5:5,\"5\":\"Rule5\",Rule6:6,\"6\":\"Rule6\", });\n/**\n*/\nexport const SymmetryMode = Object.freeze({ Horizontal:0,\"0\":\"Horizontal\",Quad:1,\"1\":\"Quad\", });\n/**\n*/\nexport class Cell {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_cell_free(ptr);\n    }\n}\n/**\n*/\nexport class Clause {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Clause.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_clause_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get probability() {\n        var ret = wasm.__wbg_get_clause_probability(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set probability(arg0) {\n        wasm.__wbg_set_clause_probability(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get symmetry() {\n        var ret = wasm.__wbg_get_clause_symmetry(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set symmetry(arg0) {\n        wasm.__wbg_set_clause_symmetry(this.ptr, arg0);\n    }\n    /**\n    * @returns {Selector}\n    */\n    get selector() {\n        var ret = wasm.__wbg_get_clause_selector(this.ptr);\n        return Selector.__wrap(ret);\n    }\n    /**\n    * @param {Selector} arg0\n    */\n    set selector(arg0) {\n        _assertClass(arg0, Selector);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_clause_selector(this.ptr, ptr0);\n    }\n    /**\n    * @returns {Effector}\n    */\n    get effector() {\n        var ret = wasm.__wbg_get_clause_effector(this.ptr);\n        return Effector.__wrap(ret);\n    }\n    /**\n    * @param {Effector} arg0\n    */\n    set effector(arg0) {\n        _assertClass(arg0, Effector);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_clause_effector(this.ptr, ptr0);\n    }\n    /**\n    * @param {number} probability\n    * @param {number} symmetry\n    * @param {Selector} selector\n    * @param {Effector} effector\n    */\n    constructor(probability, symmetry, selector, effector) {\n        _assertClass(selector, Selector);\n        var ptr0 = selector.ptr;\n        selector.ptr = 0;\n        _assertClass(effector, Effector);\n        var ptr1 = effector.ptr;\n        effector.ptr = 0;\n        var ret = wasm.clause_new(probability, symmetry, ptr0, ptr1);\n        return Clause.__wrap(ret);\n    }\n    /**\n    * @returns {Clause}\n    */\n    static new_null() {\n        var ret = wasm.clause_new_null();\n        return Clause.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    symmetry() {\n        var ret = wasm.__wbg_get_clause_symmetry(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    probability() {\n        var ret = wasm.__wbg_get_clause_probability(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nexport class Effector {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Effector.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_effector_free(ptr);\n    }\n    /**\n    * @param {number} v1\n    * @param {number} v2\n    * @param {number} v3\n    * @param {number} v4\n    * @param {number} v5\n    * @param {number} v6\n    * @param {number} v7\n    * @param {number} v8\n    * @param {number} v9\n    */\n    constructor(v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var ret = wasm.effector_new(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return Effector.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    grid() {\n        var ret = wasm.effector_grid(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nexport class Rule {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Rule.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_rule_free(ptr);\n    }\n    /**\n    * @param {Clause} c0\n    * @param {Clause} c1\n    * @param {Clause} c2\n    */\n    constructor(c0, c1, c2) {\n        _assertClass(c0, Clause);\n        var ptr0 = c0.ptr;\n        c0.ptr = 0;\n        _assertClass(c1, Clause);\n        var ptr1 = c1.ptr;\n        c1.ptr = 0;\n        _assertClass(c2, Clause);\n        var ptr2 = c2.ptr;\n        c2.ptr = 0;\n        var ret = wasm.rule_new(ptr0, ptr1, ptr2);\n        return Rule.__wrap(ret);\n    }\n    /**\n    * @param {number} i\n    * @returns {Clause}\n    */\n    clause(i) {\n        var ret = wasm.rule_clause(this.ptr, i);\n        return Clause.__wrap(ret);\n    }\n    /**\n    * @param {Clause} c\n    * @param {number} i\n    */\n    set_clause(c, i) {\n        _assertClass(c, Clause);\n        wasm.rule_set_clause(this.ptr, c.ptr, i);\n    }\n}\n/**\n*/\nexport class Selector {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Selector.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_selector_free(ptr);\n    }\n    /**\n    * @param {number} v1\n    * @param {number} v2\n    * @param {number} v3\n    * @param {number} v4\n    * @param {number} v5\n    * @param {number} v6\n    * @param {number} v7\n    * @param {number} v8\n    * @param {number} v9\n    */\n    constructor(v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var ret = wasm.effector_new(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return Selector.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    grid() {\n        var ret = wasm.effector_grid(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nexport class Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_universe_free(ptr);\n    }\n    /**\n    */\n    reset() {\n        wasm.universe_reset(this.ptr);\n    }\n    /**\n    */\n    tick() {\n        wasm.universe_tick(this.ptr);\n    }\n    /**\n    * @param {number} i\n    * @returns {number}\n    */\n    heatmap(i) {\n        var ret = wasm.universe_heatmap(this.ptr, i);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} i\n    * @returns {Rule}\n    */\n    rule(i) {\n        var ret = wasm.universe_rule(this.ptr, i);\n        return Rule.__wrap(ret);\n    }\n    /**\n    * @param {number} ri\n    * @param {number} ci\n    * @returns {Clause}\n    */\n    clause(ri, ci) {\n        var ret = wasm.universe_clause(this.ptr, ri, ci);\n        return Clause.__wrap(ret);\n    }\n    /**\n    * @param {Rule} rule\n    * @param {number} i\n    */\n    set_rule(rule, i) {\n        _assertClass(rule, Rule);\n        wasm.universe_set_rule(this.ptr, rule.ptr, i);\n    }\n    /**\n    * @param {Clause} clause\n    * @param {number} ri\n    * @param {number} ci\n    */\n    set_clause(clause, ri, ci) {\n        _assertClass(clause, Clause);\n        wasm.universe_set_clause(this.ptr, clause.ptr, ri, ci);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        var ret = wasm.universe_width(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        var ret = wasm.universe_height(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        var ret = wasm.universe_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @param {number} size\n    * @param {number} species\n    */\n    paint(x, y, size, species) {\n        wasm.universe_paint(this.ptr, x, y, size, species);\n    }\n    /**\n    */\n    push_undo() {\n        wasm.universe_push_undo(this.ptr);\n    }\n    /**\n    */\n    pop_undo() {\n        wasm.universe_pop_undo(this.ptr);\n    }\n    /**\n    */\n    flush_undos() {\n        wasm.universe_flush_undos(this.ptr);\n    }\n    /**\n    * @param {number} t\n    */\n    set_time(t) {\n        wasm.universe_set_time(this.ptr, t);\n    }\n    /**\n    */\n    inc_time() {\n        wasm.universe_inc_time(this.ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Universe}\n    */\n    static new(width, height) {\n        var ret = wasm.universe_new(width, height);\n        return Universe.__wrap(ret);\n    }\n}\n\nexport const __wbg_random_a3b3bcffa2ed629c = typeof Math.random == 'function' ? Math.random : notDefined('Math.random');\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nuniform float t;\\nuniform float skyTime;\\n\\nuniform float dpi;\\nuniform vec2 resolution;\\nuniform bool isSnapshot;\\nuniform sampler2D backBuffer;\\nuniform sampler2D dataTexture;\\n\\nvarying vec2 uv;\\nconst float PI2 = 2. * 3.14159265358979323846;\\n\\n// clang-format off\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_0(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_0(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_0(vec4 x) {\\n     return mod289_0(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise_0(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_0 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_0;\\n  vec3 i1 = min( g_0.xyz, l.zxy );\\n  vec3 i2 = max( g_0.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_0(i);\\n  vec4 p = permute_0( permute_0( permute_0(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_1(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_1(vec3 x) {\\n  return mod289_1(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_1(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_1(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_1( permute_1( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\nhighp float random(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n// clang-format on\\n\\nvoid main() {\\n  vec2 guv = uv;\\n  vec3 color;\\n\\n  vec2 textCoord = (guv * vec2(0.5, -0.5)) + vec2(0.5);\\n\\n  vec4 data = texture2D(dataTexture, textCoord);\\n  vec4 last = texture2D(backBuffer, vec2(textCoord.x, 1.0 - textCoord.y));\\n\\n  int type = int((data.r * 255.) + 0.1);\\n  float energy = data.g;\\n  float age = data.b;\\n\\n  float hue = 0.0;\\n  float saturation =  0.35 + (energy*1.5) + (age *0.2) ;\\n  float lightness = 0.7 - energy * .08;\\n  float a = 1.0;\\n  float brightness = 0.0;\\n  float speed = 0.01;\\n  // if(type == 4 || type == 5){\\n  //   // speed = 0.05;\\n  // }\\n  vec2 grid =   floor(guv * (resolution / (dpi)));\\n  grid.x+=energy*255.;\\n  float noise = snoise_0(vec3(grid, t * speed));\\n\\n  if (type == 0) { // Air\\n    hue = 0.7;\\n    saturation = 0.0;\\n    \\n    a = 0.0;\\n    lightness = 0.8;\\n    if (isSnapshot) {\\n      // lightness = 0.9;\\n      a = 1.0;\\n    }\\n  } else if (type == 1) { // wall\\n    hue = 0.1;\\n    saturation *= 0.3;\\n    lightness *= 0.5 ;\\n    lightness += noise*0.3;\\n     if (isSnapshot) {\\n      lightness = 0.2;\\n    }\\n  } else if (type == 2) { // Sand\\n    hue = 0.1;\\n    lightness += 0.1;\\n  } else if (type == 3) { // plant\\n    hue = 0.4;\\n    saturation += 0.2;\\n    lightness-=0.7*energy;\\n  } else if (type == 4) { // water\\n    hue = 0.58;\\n    // saturation -= 0.05;\\n    lightness += 0.1;\\n    lightness -= noise * 0.1;\\n    // a = 0.9;\\n    // if (isSnapshot) {\\n    //   a = 1.0;\\n    // }\\n  } else if (type == 5) { // fire\\n    hue = 0.05 + (noise * -0.1);\\n    saturation += 0.2;\\n\\n   lightness = 0.65+ energy * 1.7;\\n\\n    //  * (noise + 0.5);\\n    if (isSnapshot) {\\n      hue += -0.1;\\n    }\\n\\n  } else if (type == 6) { // purple\\n    hue = 0.8;\\n    lightness += 0.2;\\n    hue += energy * 0.2;\\n  }\\n  if (isSnapshot == false) {\\n\\n    lightness *= (0.975 + snoise_1(floor(grid)) * 0.15);\\n  }\\n  saturation = min(saturation, 1.0);\\n  lightness = min(lightness, 1.0);\\n  color = hsv2rgb(vec3(hue, saturation, lightness));\\n\\n  gl_FragColor = vec4(color, a);\\n}\"","module.exports = \"\\n// boring \\\"pass-through\\\" vertex shader\\nprecision mediump float;\\n#define GLSLIFY 1\\nattribute vec2 position;\\nvarying vec2 uv;\\nvoid main() {\\n  uv = position;\\n  gl_Position = vec4(position, 0, 1);\\n}\"","// if (window.safari) {\n//   history.pushState(null, null, location.href);\n//   window.onpopstate = function(event) {\n//     history.go(1);\n//   };\n// }\n\n// let background = document.getElementById(\"background\");\nlet fadeTimout = 1000 * 30;\nlet timeout = window.setTimeout(() => {\n  if (window.UI.state.tutorialProgress > 3) {\n    document.body.classList.add(\"faded\");\n  }\n}, fadeTimout);\n\nlet handleActivity = e => {\n  window.clearTimeout(timeout);\n  document.body.classList.remove(\"faded\");\n  timeout = window.setTimeout(() => {\n    if (window.UI.state.tutorialProgress > 3) {\n      document.body.classList.add(\"faded\");\n    }\n  }, fadeTimout);\n};\ndocument.body.addEventListener(\"mousemove\", handleActivity);\ndocument.body.addEventListener(\"touchstart\", handleActivity);\n\n// background.addEventListener(\"touchmove\", e => {\n//   if (!window.paused) {\n//     if (e.cancelable) {\n//       e.preventDefault();\n//     }\n//   }\n// });\n\n// if (\"serviceWorker\" in navigator) {\n//   window.addEventListener(\"load\", () => {\n//     navigator.serviceWorker\n//       .register(\"/service-worker.js\")\n//       .then(registration => {\n//         console.log(\"SW registered: \", registration);\n//       })\n//       .catch(registrationError => {\n//         console.log(\"SW registration failed: \", registrationError);\n//       });\n//   });\n// }\n"],"sourceRoot":""}